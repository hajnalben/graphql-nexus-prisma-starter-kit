diff --git a/node_modules/sofa-api/.DS_Store b/node_modules/sofa-api/.DS_Store
new file mode 100644
index 0000000..5008ddf
Binary files /dev/null and b/node_modules/sofa-api/.DS_Store differ
diff --git a/node_modules/sofa-api/dist/ast.js b/node_modules/sofa-api/dist/ast.js
index bb5985a..110bf85 100644
--- a/node_modules/sofa-api/dist/ast.js
+++ b/node_modules/sofa-api/dist/ast.js
@@ -1,8 +1,8 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var graphql_1 = require("graphql");
+const graphql_1 = require("graphql");
 function getOperationInfo(doc) {
-    var op = graphql_1.getOperationAST(doc, null);
+    const op = graphql_1.getOperationAST(doc, null);
     if (!op) {
         return;
     }
diff --git a/node_modules/sofa-api/dist/ast.js.map b/node_modules/sofa-api/dist/ast.js.map
index 5abc488..997cc62 100644
--- a/node_modules/sofa-api/dist/ast.js.map
+++ b/node_modules/sofa-api/dist/ast.js.map
@@ -1 +1 @@
-{"version":3,"file":"ast.js","sourceRoot":"","sources":["../src/ast.ts"],"names":[],"mappings":";;AAAA,mCAKiB;AAUjB,SAAgB,gBAAgB,CAAC,GAAiB;IAChD,IAAM,EAAE,GAAG,yBAAe,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAEtC,IAAI,CAAC,EAAE,EAAE;QACP,OAAO;KACR;IAED,OAAO;QACL,SAAS,EAAE,EAAE;QACb,IAAI,EAAE,EAAE,CAAC,IAAK,CAAC,KAAK;QACpB,SAAS,EAAE,EAAE,CAAC,mBAAmB,IAAI,EAAE;KACxC,CAAC;AACJ,CAAC;AAZD,4CAYC","sourcesContent":["import {\n  getOperationAST,\n  DocumentNode,\n  OperationDefinitionNode,\n  VariableDefinitionNode,\n} from 'graphql';\n\nexport type OperationInfo =\n  | {\n      operation: OperationDefinitionNode;\n      variables: ReadonlyArray<VariableDefinitionNode>;\n      name: string;\n    }\n  | undefined;\n\nexport function getOperationInfo(doc: DocumentNode): OperationInfo {\n  const op = getOperationAST(doc, null);\n\n  if (!op) {\n    return;\n  }\n\n  return {\n    operation: op,\n    name: op.name!.value,\n    variables: op.variableDefinitions || [],\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"ast.js","sourceRoot":"","sources":["../src/ast.ts"],"names":[],"mappings":";;AAAA,qCAKiB;AAUjB,SAAgB,gBAAgB,CAAC,GAAiB;IAChD,MAAM,EAAE,GAAG,yBAAe,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAEtC,IAAI,CAAC,EAAE,EAAE;QACP,OAAO;KACR;IAED,OAAO;QACL,SAAS,EAAE,EAAE;QACb,IAAI,EAAE,EAAE,CAAC,IAAK,CAAC,KAAK;QACpB,SAAS,EAAE,EAAE,CAAC,mBAAmB,IAAI,EAAE;KACxC,CAAC;AACJ,CAAC;AAZD,4CAYC","sourcesContent":["import {\n  getOperationAST,\n  DocumentNode,\n  OperationDefinitionNode,\n  VariableDefinitionNode,\n} from 'graphql';\n\nexport type OperationInfo =\n  | {\n      operation: OperationDefinitionNode;\n      variables: ReadonlyArray<VariableDefinitionNode>;\n      name: string;\n    }\n  | undefined;\n\nexport function getOperationInfo(doc: DocumentNode): OperationInfo {\n  const op = getOperationAST(doc, null);\n\n  if (!op) {\n    return;\n  }\n\n  return {\n    operation: op,\n    name: op.name!.value,\n    variables: op.variableDefinitions || [],\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/common.js b/node_modules/sofa-api/dist/common.js
index a05a309..533300c 100644
--- a/node_modules/sofa-api/dist/common.js
+++ b/node_modules/sofa-api/dist/common.js
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var changeCase = require("change-case");
+const changeCase = require("change-case");
 function convertName(name) {
     return changeCase.param(name);
 }
diff --git a/node_modules/sofa-api/dist/common.js.map b/node_modules/sofa-api/dist/common.js.map
index 3c692e1..9ab1e2b 100644
--- a/node_modules/sofa-api/dist/common.js.map
+++ b/node_modules/sofa-api/dist/common.js.map
@@ -1 +1 @@
-{"version":3,"file":"common.js","sourceRoot":"","sources":["../src/common.ts"],"names":[],"mappings":";;AAAA,wCAA0C;AAE1C,SAAgB,WAAW,CAAC,IAAY;IACtC,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC;AAFD,kCAEC","sourcesContent":["import * as changeCase from 'change-case';\n\nexport function convertName(name: string) {\n  return changeCase.param(name);\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"common.js","sourceRoot":"","sources":["../src/common.ts"],"names":[],"mappings":";;AAAA,0CAA0C;AAE1C,SAAgB,WAAW,CAAC,IAAY;IACtC,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC;AAFD,kCAEC","sourcesContent":["import * as changeCase from 'change-case';\n\nexport function convertName(name: string) {\n  return changeCase.param(name);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/express.js b/node_modules/sofa-api/dist/express.js
index c32915b..96e05c8 100644
--- a/node_modules/sofa-api/dist/express.js
+++ b/node_modules/sofa-api/dist/express.js
@@ -1,15 +1,4 @@
 "use strict";
-var __assign = (this && this.__assign) || function () {
-    __assign = Object.assign || function(t) {
-        for (var s, i = 1, n = arguments.length; i < n; i++) {
-            s = arguments[i];
-            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
-                t[p] = s[p];
-        }
-        return t;
-    };
-    return __assign.apply(this, arguments);
-};
 var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
     return new (P || (P = Promise))(function (resolve, reject) {
         function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
@@ -18,261 +7,177 @@ var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, ge
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
-var __generator = (this && this.__generator) || function (thisArg, body) {
-    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
-    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
-    function verb(n) { return function (v) { return step([n, v]); }; }
-    function step(op) {
-        if (f) throw new TypeError("Generator is already executing.");
-        while (_) try {
-            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
-            if (y = 0, t) op = [op[0] & 2, t.value];
-            switch (op[0]) {
-                case 0: case 1: t = op; break;
-                case 4: _.label++; return { value: op[1], done: false };
-                case 5: _.label++; y = op[1]; op = [0]; continue;
-                case 7: op = _.ops.pop(); _.trys.pop(); continue;
-                default:
-                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
-                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
-                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
-                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
-                    if (t[2]) _.ops.pop();
-                    _.trys.pop(); continue;
-            }
-            op = body.call(thisArg, _);
-        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
-        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
-    }
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-var express = require("express");
-var graphql_1 = require("graphql");
-var operation_1 = require("./operation");
-var ast_1 = require("./ast");
-var sofa_1 = require("./sofa");
-var common_1 = require("./common");
-var parse_1 = require("./parse");
-var subscriptions_1 = require("./subscriptions");
-var logger_1 = require("./logger");
+const express = require("express");
+const graphql_1 = require("graphql");
+const operation_1 = require("./operation");
+const ast_1 = require("./ast");
+const sofa_1 = require("./sofa");
+const common_1 = require("./common");
+const parse_1 = require("./parse");
+const subscriptions_1 = require("./subscriptions");
+const logger_1 = require("./logger");
 function createRouter(sofa) {
-    var _this = this;
     logger_1.logger.debug('[Sofa] Creating router');
-    var router = express.Router();
-    var queryType = sofa.schema.getQueryType();
-    var mutationType = sofa.schema.getMutationType();
-    var subscriptionManager = new subscriptions_1.SubscriptionManager(sofa);
+    const router = express.Router();
+    const queryType = sofa.schema.getQueryType();
+    const mutationType = sofa.schema.getMutationType();
+    const subscriptionManager = new subscriptions_1.SubscriptionManager(sofa);
     if (queryType) {
-        Object.keys(queryType.getFields()).forEach(function (fieldName) {
-            var route = createQueryRoute({ sofa: sofa, router: router, fieldName: fieldName });
+        Object.keys(queryType.getFields()).forEach(fieldName => {
+            const route = createQueryRoute({ sofa, router, fieldName });
             if (sofa.onRoute) {
                 sofa.onRoute(route);
             }
         });
     }
     if (mutationType) {
-        Object.keys(mutationType.getFields()).forEach(function (fieldName) {
-            var route = createMutationRoute({ sofa: sofa, router: router, fieldName: fieldName });
+        Object.keys(mutationType.getFields()).forEach(fieldName => {
+            const route = createMutationRoute({ sofa, router, fieldName });
             if (sofa.onRoute) {
                 sofa.onRoute(route);
             }
         });
     }
-    router.post('/webhook', useAsync(function (req, res) { return __awaiter(_this, void 0, void 0, function () {
-        var _a, subscription, variables, url, result, e_1;
-        return __generator(this, function (_b) {
-            switch (_b.label) {
-                case 0:
-                    _a = req.body, subscription = _a.subscription, variables = _a.variables, url = _a.url;
-                    _b.label = 1;
-                case 1:
-                    _b.trys.push([1, 3, , 4]);
-                    return [4 /*yield*/, subscriptionManager.start({
-                            subscription: subscription,
-                            variables: variables,
-                            url: url,
-                        }, { req: req, res: res })];
-                case 2:
-                    result = _b.sent();
-                    res.statusCode = 200;
-                    res.statusMessage = 'OK';
-                    res.json(result);
-                    return [3 /*break*/, 4];
-                case 3:
-                    e_1 = _b.sent();
-                    console.log(e_1);
-                    res.statusCode = 500;
-                    res.statusMessage = 'Subscription failed';
-                    res.json(e_1);
-                    return [3 /*break*/, 4];
-                case 4: return [2 /*return*/];
-            }
-        });
-    }); }));
-    router.post('/webhook/:id', useAsync(function (req, res) { return __awaiter(_this, void 0, void 0, function () {
-        var id, variables, result, e_2;
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0:
-                    id = req.params.id;
-                    variables = req.body.variables;
-                    _a.label = 1;
-                case 1:
-                    _a.trys.push([1, 3, , 4]);
-                    return [4 /*yield*/, subscriptionManager.update({
-                            id: id,
-                            variables: variables,
-                        }, {
-                            req: req,
-                            res: res,
-                        })];
-                case 2:
-                    result = _a.sent();
-                    res.statusCode = 200;
-                    res.statusMessage = 'OK';
-                    res.json(result);
-                    return [3 /*break*/, 4];
-                case 3:
-                    e_2 = _a.sent();
-                    console.log(e_2);
-                    res.statusCode = 500;
-                    res.statusMessage = 'Subscription failed to update';
-                    res.json(e_2);
-                    return [3 /*break*/, 4];
-                case 4: return [2 /*return*/];
-            }
-        });
-    }); }));
-    router.delete('/webhook/:id', useAsync(function (req, res) { return __awaiter(_this, void 0, void 0, function () {
-        var id, result, e_3;
-        return __generator(this, function (_a) {
-            switch (_a.label) {
-                case 0:
-                    id = req.params.id;
-                    _a.label = 1;
-                case 1:
-                    _a.trys.push([1, 3, , 4]);
-                    return [4 /*yield*/, subscriptionManager.stop(id)];
-                case 2:
-                    result = _a.sent();
-                    res.statusCode = 200;
-                    res.statusMessage = 'OK';
-                    res.json(result);
-                    return [3 /*break*/, 4];
-                case 3:
-                    e_3 = _a.sent();
-                    console.log(e_3);
-                    res.statusCode = 500;
-                    res.statusMessage = 'Subscription failed to stop';
-                    res.json(e_3);
-                    return [3 /*break*/, 4];
-                case 4: return [2 /*return*/];
-            }
-        });
-    }); }));
+    router.post('/webhook', useAsync((req, res) => __awaiter(this, void 0, void 0, function* () {
+        const { subscription, variables, url } = req.body;
+        try {
+            const result = yield subscriptionManager.start({
+                subscription,
+                variables,
+                url,
+            }, { req, res });
+            res.statusCode = 200;
+            res.statusMessage = 'OK';
+            res.json(result);
+        }
+        catch (e) {
+            console.log(e);
+            res.statusCode = 500;
+            res.statusMessage = 'Subscription failed';
+            res.json(e);
+        }
+    })));
+    router.post('/webhook/:id', useAsync((req, res) => __awaiter(this, void 0, void 0, function* () {
+        const id = req.params.id;
+        const variables = req.body.variables;
+        try {
+            const result = yield subscriptionManager.update({
+                id,
+                variables,
+            }, {
+                req,
+                res,
+            });
+            res.statusCode = 200;
+            res.statusMessage = 'OK';
+            res.json(result);
+        }
+        catch (e) {
+            console.log(e);
+            res.statusCode = 500;
+            res.statusMessage = 'Subscription failed to update';
+            res.json(e);
+        }
+    })));
+    router.delete('/webhook/:id', useAsync((req, res) => __awaiter(this, void 0, void 0, function* () {
+        const id = req.params.id;
+        try {
+            const result = yield subscriptionManager.stop(id);
+            res.statusCode = 200;
+            res.statusMessage = 'OK';
+            res.json(result);
+        }
+        catch (e) {
+            console.log(e);
+            res.statusCode = 500;
+            res.statusMessage = 'Subscription failed to stop';
+            res.json(e);
+        }
+    })));
     return router;
 }
 exports.createRouter = createRouter;
-function createQueryRoute(_a) {
-    var sofa = _a.sofa, router = _a.router, fieldName = _a.fieldName;
-    logger_1.logger.debug("[Router] Creating " + fieldName + " query");
-    var queryType = sofa.schema.getQueryType();
-    var operation = operation_1.buildOperation({
+function createQueryRoute({ sofa, router, fieldName, }) {
+    logger_1.logger.debug(`[Router] Creating ${fieldName} query`);
+    const queryType = sofa.schema.getQueryType();
+    const operation = operation_1.buildOperation({
         kind: 'query',
         schema: sofa.schema,
         field: fieldName,
         models: sofa.models,
         ignore: sofa.ignore,
     });
-    var info = ast_1.getOperationInfo(operation);
-    var field = queryType.getFields()[fieldName];
-    var fieldType = field.type;
-    var isSingle = graphql_1.isObjectType(fieldType) ||
+    const info = ast_1.getOperationInfo(operation);
+    const field = queryType.getFields()[fieldName];
+    const fieldType = field.type;
+    const isSingle = graphql_1.isObjectType(fieldType) ||
         (graphql_1.isNonNullType(fieldType) && graphql_1.isObjectType(fieldType.ofType));
-    var hasIdArgument = field.args.some(function (arg) { return arg.name === 'id'; });
-    var path = getPath(fieldName, isSingle && hasIdArgument);
-    router.get(path, useHandler({ info: info, fieldName: fieldName, sofa: sofa, operation: operation }));
-    logger_1.logger.debug("[Router] " + fieldName + " query available at " + path);
+    const hasIdArgument = field.args.some(arg => arg.name === 'id');
+    const path = getPath(fieldName, isSingle && hasIdArgument);
+    const method = field.args.find(arg => isInputType(arg.type)) ? 'post' : 'get';
+    router[method](path, useHandler({ info, fieldName, sofa, operation }));
+    logger_1.logger.debug(`[Router] ${fieldName} query available at ${path}`);
     return {
         document: operation,
-        path: path,
-        method: 'GET',
+        path,
+        method: method.toUpperCase(),
     };
 }
-function createMutationRoute(_a) {
-    var sofa = _a.sofa, router = _a.router, fieldName = _a.fieldName;
-    logger_1.logger.debug("[Router] Creating " + fieldName + " mutation");
-    var operation = operation_1.buildOperation({
+function createMutationRoute({ sofa, router, fieldName, }) {
+    logger_1.logger.debug(`[Router] Creating ${fieldName} mutation`);
+    const operation = operation_1.buildOperation({
         kind: 'mutation',
         schema: sofa.schema,
         field: fieldName,
         models: sofa.models,
         ignore: sofa.ignore,
     });
-    var info = ast_1.getOperationInfo(operation);
-    var path = getPath(fieldName);
-    router.post(path, useHandler({ info: info, fieldName: fieldName, sofa: sofa, operation: operation }));
-    logger_1.logger.debug("[Router] " + fieldName + " mutation available at " + path);
+    const info = ast_1.getOperationInfo(operation);
+    const path = getPath(fieldName);
+    router.post(path, useHandler({ info, fieldName, sofa, operation }));
+    logger_1.logger.debug(`[Router] ${fieldName} mutation available at ${path}`);
     return {
         document: operation,
-        path: path,
+        path,
         method: 'POST',
     };
 }
 function useHandler(config) {
-    var _this = this;
-    var sofa = config.sofa, operation = config.operation, fieldName = config.fieldName;
-    var info = config.info;
-    return useAsync(function (req, res) { return __awaiter(_this, void 0, void 0, function () {
-        var variableValues, C, _a, result;
-        return __generator(this, function (_b) {
-            switch (_b.label) {
-                case 0:
-                    variableValues = info.variables.reduce(function (variables, variable) {
-                        var _a;
-                        var name = variable.variable.name.value;
-                        var value = parse_1.parseVariable({
-                            value: pickParam(req, name),
-                            variable: variable,
-                            schema: sofa.schema,
-                        });
-                        if (typeof value === 'undefined') {
-                            return variables;
-                        }
-                        return __assign({}, variables, (_a = {}, _a[name] = value, _a));
-                    }, {});
-                    if (!sofa_1.isContextFn(sofa.context)) return [3 /*break*/, 2];
-                    return [4 /*yield*/, sofa.context({ req: req, res: res })];
-                case 1:
-                    _a = _b.sent();
-                    return [3 /*break*/, 3];
-                case 2:
-                    _a = sofa.context;
-                    _b.label = 3;
-                case 3:
-                    C = _a;
-                    return [4 /*yield*/, sofa.execute({
-                            schema: sofa.schema,
-                            source: graphql_1.print(operation),
-                            contextValue: C,
-                            variableValues: variableValues,
-                            operationName: info.operation.name && info.operation.name.value,
-                        })];
-                case 4:
-                    result = _b.sent();
-                    // TODO: add error handling for result.errors
-                    if (result.errors) {
-                        throw new Error(result.errors.toString());
-                    }
-                    res.json(result.data && result.data[fieldName]);
-                    return [2 /*return*/];
+    const { sofa, operation, fieldName } = config;
+    const info = config.info;
+    return useAsync((req, res) => __awaiter(this, void 0, void 0, function* () {
+        const variableValues = info.variables.reduce((variables, variable) => {
+            const name = variable.variable.name.value;
+            const value = parse_1.parseVariable({
+                value: pickParam(req, name),
+                variable,
+                schema: sofa.schema,
+            });
+            if (typeof value === 'undefined') {
+                return variables;
             }
+            return Object.assign({}, variables, { [name]: value });
+        }, {});
+        const contextValue = sofa_1.isContextFn(sofa.context)
+            ? yield sofa.context({ req, res })
+            : sofa.context;
+        const result = yield sofa.execute({
+            schema: sofa.schema,
+            source: graphql_1.print(operation),
+            contextValue,
+            variableValues,
+            operationName: info.operation.name && info.operation.name.value,
         });
-    }); });
+        // TODO: add error handling for result.errors
+        if (result.errors) {
+            throw new Error(result.errors.toString());
+        }
+        res.json(result.data && result.data[fieldName]);
+    }));
 }
-function getPath(fieldName, hasId) {
-    if (hasId === void 0) { hasId = false; }
-    return "/" + common_1.convertName(fieldName) + (hasId ? '/:id' : '');
+function getPath(fieldName, hasId = false) {
+    return `/${common_1.convertName(fieldName)}${hasId ? '/:id' : ''}`;
 }
 function pickParam(req, name) {
     if (req.params && req.params[name]) {
@@ -285,9 +190,16 @@ function pickParam(req, name) {
         return req.body[name];
     }
 }
+// Graphql provided isInputType accepts GraphQLScalarType, GraphQLEnumType.
+function isInputType(type) {
+    if (type instanceof graphql_1.GraphQLNonNull) {
+        return isInputType(type.ofType);
+    }
+    return type instanceof graphql_1.GraphQLInputObjectType;
+}
 function useAsync(handler) {
-    return function (req, res, next) {
-        Promise.resolve(handler(req, res, next)).catch(function (e) {
+    return (req, res, next) => {
+        Promise.resolve(handler(req, res, next)).catch(e => {
             console.log(e);
             next(e);
         });
diff --git a/node_modules/sofa-api/dist/express.js.map b/node_modules/sofa-api/dist/express.js.map
index 43fa3c5..25b1d59 100644
--- a/node_modules/sofa-api/dist/express.js.map
+++ b/node_modules/sofa-api/dist/express.js.map
@@ -1 +1 @@
-{"version":3,"file":"express.js","sourceRoot":"","sources":["../src/express.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport { DocumentNode, print, isObjectType, isNonNullType } from 'graphql';\n\nimport { buildOperation } from './operation';\nimport { getOperationInfo, OperationInfo } from './ast';\nimport { Sofa, isContextFn } from './sofa';\nimport { RouteInfo } from './types';\nimport { convertName } from './common';\nimport { parseVariable } from './parse';\nimport { StartSubscriptionEvent, SubscriptionManager } from './subscriptions';\nimport { logger } from './logger';\n\nexport type ErrorHandler = (res: express.Response, error: any) => void;\n\nexport function createRouter(sofa: Sofa): express.Router {\n  logger.debug('[Sofa] Creating router');\n\n  const router = express.Router();\n\n  const queryType = sofa.schema.getQueryType();\n  const mutationType = sofa.schema.getMutationType();\n  const subscriptionManager = new SubscriptionManager(sofa);\n\n  if (queryType) {\n    Object.keys(queryType.getFields()).forEach(fieldName => {\n      const route = createQueryRoute({ sofa, router, fieldName });\n\n      if (sofa.onRoute) {\n        sofa.onRoute(route);\n      }\n    });\n  }\n\n  if (mutationType) {\n    Object.keys(mutationType.getFields()).forEach(fieldName => {\n      const route = createMutationRoute({ sofa, router, fieldName });\n\n      if (sofa.onRoute) {\n        sofa.onRoute(route);\n      }\n    });\n  }\n\n  router.post(\n    '/webhook',\n    useAsync(async (req, res) => {\n      const { subscription, variables, url }: StartSubscriptionEvent = req.body;\n\n      try {\n        const result = await subscriptionManager.start(\n          {\n            subscription,\n            variables,\n            url,\n          },\n          { req, res }\n        );\n\n        res.statusCode = 200;\n        res.statusMessage = 'OK';\n        res.json(result);\n      } catch (e) {\n        console.log(e);\n        res.statusCode = 500;\n        res.statusMessage = 'Subscription failed';\n        res.json(e);\n      }\n    })\n  );\n\n  router.post(\n    '/webhook/:id',\n    useAsync(async (req, res) => {\n      const id: string = req.params.id;\n      const variables: any = req.body.variables;\n\n      try {\n        const result = await subscriptionManager.update(\n          {\n            id,\n            variables,\n          },\n          {\n            req,\n            res,\n          }\n        );\n\n        res.statusCode = 200;\n        res.statusMessage = 'OK';\n        res.json(result);\n      } catch (e) {\n        console.log(e);\n        res.statusCode = 500;\n        res.statusMessage = 'Subscription failed to update';\n        res.json(e);\n      }\n    })\n  );\n\n  router.delete(\n    '/webhook/:id',\n    useAsync(async (req, res) => {\n      const id: string = req.params.id;\n\n      try {\n        const result = await subscriptionManager.stop(id);\n\n        res.statusCode = 200;\n        res.statusMessage = 'OK';\n        res.json(result);\n      } catch (e) {\n        console.log(e);\n        res.statusCode = 500;\n        res.statusMessage = 'Subscription failed to stop';\n        res.json(e);\n      }\n    })\n  );\n\n  return router;\n}\n\nfunction createQueryRoute({\n  sofa,\n  router,\n  fieldName,\n}: {\n  sofa: Sofa;\n  router: express.Router;\n  fieldName: string;\n}): RouteInfo {\n  logger.debug(`[Router] Creating ${fieldName} query`);\n\n  const queryType = sofa.schema.getQueryType()!;\n  const operation = buildOperation({\n    kind: 'query',\n    schema: sofa.schema,\n    field: fieldName,\n    models: sofa.models,\n    ignore: sofa.ignore,\n  });\n  const info = getOperationInfo(operation)!;\n  const field = queryType.getFields()[fieldName];\n  const fieldType = field.type;\n  const isSingle =\n    isObjectType(fieldType) ||\n    (isNonNullType(fieldType) && isObjectType(fieldType.ofType));\n  const hasIdArgument = field.args.some(arg => arg.name === 'id');\n  const path = getPath(fieldName, isSingle && hasIdArgument);\n\n  router.get(path, useHandler({ info, fieldName, sofa, operation }));\n\n  logger.debug(`[Router] ${fieldName} query available at ${path}`);\n\n  return {\n    document: operation,\n    path,\n    method: 'GET',\n  };\n}\n\nfunction createMutationRoute({\n  sofa,\n  router,\n  fieldName,\n}: {\n  sofa: Sofa;\n  router: express.Router;\n  fieldName: string;\n}): RouteInfo {\n  logger.debug(`[Router] Creating ${fieldName} mutation`);\n\n  const operation = buildOperation({\n    kind: 'mutation',\n    schema: sofa.schema,\n    field: fieldName,\n    models: sofa.models,\n    ignore: sofa.ignore,\n  });\n  const info = getOperationInfo(operation)!;\n  const path = getPath(fieldName);\n\n  router.post(path, useHandler({ info, fieldName, sofa, operation }));\n\n  logger.debug(`[Router] ${fieldName} mutation available at ${path}`);\n\n  return {\n    document: operation,\n    path,\n    method: 'POST',\n  };\n}\n\nfunction useHandler(config: {\n  sofa: Sofa;\n  info: OperationInfo;\n  operation: DocumentNode;\n  fieldName: string;\n}) {\n  const { sofa, operation, fieldName } = config;\n  const info = config.info!;\n\n  return useAsync(async (req: express.Request, res: express.Response) => {\n    const variableValues = info.variables.reduce((variables, variable) => {\n      const name = variable.variable.name.value;\n      const value = parseVariable({\n        value: pickParam(req, name),\n        variable,\n        schema: sofa.schema,\n      });\n\n      if (typeof value === 'undefined') {\n        return variables;\n      }\n\n      return {\n        ...variables,\n        [name]: value,\n      };\n    }, {});\n\n    const C = isContextFn(sofa.context)\n      ? await sofa.context({ req, res })\n      : sofa.context;\n\n    const result = await sofa.execute({\n      schema: sofa.schema,\n      source: print(operation),\n      contextValue: C,\n      variableValues,\n      operationName: info.operation.name && info.operation.name.value,\n    });\n\n    // TODO: add error handling for result.errors\n    if (result.errors) {\n      throw new Error(result.errors.toString());\n    }\n\n    res.json(result.data && result.data[fieldName]);\n  });\n}\n\nfunction getPath(fieldName: string, hasId = false) {\n  return `/${convertName(fieldName)}${hasId ? '/:id' : ''}`;\n}\n\nfunction pickParam(req: express.Request, name: string) {\n  if (req.params && req.params[name]) {\n    return req.params[name];\n  }\n\n  if (req.query && req.query[name]) {\n    return req.query[name];\n  }\n\n  if (req.body && req.body[name]) {\n    return req.body[name];\n  }\n}\n\nfunction useAsync<T = any>(\n  handler: (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) => Promise<T>\n) {\n  return (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) => {\n    Promise.resolve(handler(req, res, next)).catch(e => {\n      console.log(e);\n      next(e);\n    });\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"express.js","sourceRoot":"","sources":["../src/express.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport {\n  DocumentNode,\n  print,\n  isObjectType,\n  isNonNullType,\n  GraphQLInputObjectType,\n  GraphQLNonNull,\n} from 'graphql';\n\nimport { buildOperation } from './operation';\nimport { getOperationInfo, OperationInfo } from './ast';\nimport { Sofa, isContextFn } from './sofa';\nimport { RouteInfo } from './types';\nimport { convertName } from './common';\nimport { parseVariable } from './parse';\nimport { StartSubscriptionEvent, SubscriptionManager } from './subscriptions';\nimport { logger } from './logger';\n\nexport type ErrorHandler = (res: express.Response, error: any) => void;\n\nexport function createRouter(sofa: Sofa): express.Router {\n  logger.debug('[Sofa] Creating router');\n\n  const router = express.Router();\n\n  const queryType = sofa.schema.getQueryType();\n  const mutationType = sofa.schema.getMutationType();\n  const subscriptionManager = new SubscriptionManager(sofa);\n\n  if (queryType) {\n    Object.keys(queryType.getFields()).forEach(fieldName => {\n      const route = createQueryRoute({ sofa, router, fieldName });\n\n      if (sofa.onRoute) {\n        sofa.onRoute(route);\n      }\n    });\n  }\n\n  if (mutationType) {\n    Object.keys(mutationType.getFields()).forEach(fieldName => {\n      const route = createMutationRoute({ sofa, router, fieldName });\n\n      if (sofa.onRoute) {\n        sofa.onRoute(route);\n      }\n    });\n  }\n\n  router.post(\n    '/webhook',\n    useAsync(async (req, res) => {\n      const { subscription, variables, url }: StartSubscriptionEvent = req.body;\n\n      try {\n        const result = await subscriptionManager.start(\n          {\n            subscription,\n            variables,\n            url,\n          },\n          { req, res }\n        );\n\n        res.statusCode = 200;\n        res.statusMessage = 'OK';\n        res.json(result);\n      } catch (e) {\n        console.log(e);\n        res.statusCode = 500;\n        res.statusMessage = 'Subscription failed';\n        res.json(e);\n      }\n    })\n  );\n\n  router.post(\n    '/webhook/:id',\n    useAsync(async (req, res) => {\n      const id: string = req.params.id;\n      const variables: any = req.body.variables;\n\n      try {\n        const result = await subscriptionManager.update(\n          {\n            id,\n            variables,\n          },\n          {\n            req,\n            res,\n          }\n        );\n\n        res.statusCode = 200;\n        res.statusMessage = 'OK';\n        res.json(result);\n      } catch (e) {\n        console.log(e);\n        res.statusCode = 500;\n        res.statusMessage = 'Subscription failed to update';\n        res.json(e);\n      }\n    })\n  );\n\n  router.delete(\n    '/webhook/:id',\n    useAsync(async (req, res) => {\n      const id: string = req.params.id;\n\n      try {\n        const result = await subscriptionManager.stop(id);\n\n        res.statusCode = 200;\n        res.statusMessage = 'OK';\n        res.json(result);\n      } catch (e) {\n        console.log(e);\n        res.statusCode = 500;\n        res.statusMessage = 'Subscription failed to stop';\n        res.json(e);\n      }\n    })\n  );\n\n  return router;\n}\n\nfunction createQueryRoute({\n  sofa,\n  router,\n  fieldName,\n}: {\n  sofa: Sofa;\n  router: express.Router;\n  fieldName: string;\n}): RouteInfo {\n  logger.debug(`[Router] Creating ${fieldName} query`);\n\n  const queryType = sofa.schema.getQueryType()!;\n  const operation = buildOperation({\n    kind: 'query',\n    schema: sofa.schema,\n    field: fieldName,\n    models: sofa.models,\n    ignore: sofa.ignore,\n  });\n  const info = getOperationInfo(operation)!;\n  const field = queryType.getFields()[fieldName];\n  const fieldType = field.type;\n  const isSingle =\n    isObjectType(fieldType) ||\n    (isNonNullType(fieldType) && isObjectType(fieldType.ofType));\n  const hasIdArgument = field.args.some(arg => arg.name === 'id');\n  const path = getPath(fieldName, isSingle && hasIdArgument);\n\n  const method = field.args.find(arg => isInputType(arg.type)) ? 'post' : 'get';\n\n  router[method](path, useHandler({ info, fieldName, sofa, operation }));\n\n  logger.debug(`[Router] ${fieldName} query available at ${path}`);\n\n  return {\n    document: operation,\n    path,\n    method: method.toUpperCase() as 'POST' | 'GET',\n  };\n}\n\nfunction createMutationRoute({\n  sofa,\n  router,\n  fieldName,\n}: {\n  sofa: Sofa;\n  router: express.Router;\n  fieldName: string;\n}): RouteInfo {\n  logger.debug(`[Router] Creating ${fieldName} mutation`);\n\n  const operation = buildOperation({\n    kind: 'mutation',\n    schema: sofa.schema,\n    field: fieldName,\n    models: sofa.models,\n    ignore: sofa.ignore,\n  });\n  const info = getOperationInfo(operation)!;\n  const path = getPath(fieldName);\n\n  router.post(path, useHandler({ info, fieldName, sofa, operation }));\n\n  logger.debug(`[Router] ${fieldName} mutation available at ${path}`);\n\n  return {\n    document: operation,\n    path,\n    method: 'POST',\n  };\n}\n\nfunction useHandler(config: {\n  sofa: Sofa;\n  info: OperationInfo;\n  operation: DocumentNode;\n  fieldName: string;\n}) {\n  const { sofa, operation, fieldName } = config;\n  const info = config.info!;\n\n  return useAsync(async (req: express.Request, res: express.Response) => {\n    const variableValues = info.variables.reduce((variables, variable) => {\n      const name = variable.variable.name.value;\n      const value = parseVariable({\n        value: pickParam(req, name),\n        variable,\n        schema: sofa.schema,\n      });\n\n      if (typeof value === 'undefined') {\n        return variables;\n      }\n\n      return {\n        ...variables,\n        [name]: value,\n      };\n    }, {});\n\n    const contextValue = isContextFn(sofa.context)\n      ? await sofa.context({ req, res })\n      : sofa.context;\n\n    const result = await sofa.execute({\n      schema: sofa.schema,\n      source: print(operation),\n      contextValue,\n      variableValues,\n      operationName: info.operation.name && info.operation.name.value,\n    });\n\n    // TODO: add error handling for result.errors\n    if (result.errors) {\n      throw new Error(result.errors.toString());\n    }\n\n    res.json(result.data && result.data[fieldName]);\n  });\n}\n\nfunction getPath(fieldName: string, hasId = false) {\n  return `/${convertName(fieldName)}${hasId ? '/:id' : ''}`;\n}\n\nfunction pickParam(req: express.Request, name: string) {\n  if (req.params && req.params[name]) {\n    return req.params[name];\n  }\n\n  if (req.query && req.query[name]) {\n    return req.query[name];\n  }\n\n  if (req.body && req.body[name]) {\n    return req.body[name];\n  }\n}\n\n// Graphql provided isInputType accepts GraphQLScalarType, GraphQLEnumType.\nfunction isInputType(type: any): boolean {\n  if (type instanceof GraphQLNonNull) {\n    return isInputType(type.ofType);\n  }\n\n  return type instanceof GraphQLInputObjectType;\n}\n\nfunction useAsync<T = any>(\n  handler: (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) => Promise<T>\n) {\n  return (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) => {\n    Promise.resolve(handler(req, res, next)).catch(e => {\n      console.log(e);\n      next(e);\n    });\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/index.js b/node_modules/sofa-api/dist/index.js
index 0b8c26a..56c0f93 100644
--- a/node_modules/sofa-api/dist/index.js
+++ b/node_modules/sofa-api/dist/index.js
@@ -1,7 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var express_1 = require("./express");
-var sofa_1 = require("./sofa");
+const express_1 = require("./express");
+const sofa_1 = require("./sofa");
 exports.createSofa = sofa_1.createSofa;
 var open_api_1 = require("./open-api");
 exports.OpenAPI = open_api_1.OpenAPI;
diff --git a/node_modules/sofa-api/dist/index.js.map b/node_modules/sofa-api/dist/index.js.map
index 801eb5a..f7cee53 100644
--- a/node_modules/sofa-api/dist/index.js.map
+++ b/node_modules/sofa-api/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAEA,qCAAyC;AACzC,+BAAgD;AAQ9B,qBARG,iBAAU,CAQH;AAN5B,uCAAqC;AAA5B,6BAAA,OAAO,CAAA;AAEhB,SAAS,OAAO,CAAC,MAAkB;IACjC,OAAO,sBAAY,CAAC,iBAAU,CAAC,MAAM,CAAC,CAAC,CAAC;AAC1C,CAAC;AAEQ,0BAAO;AAChB,kBAAe,OAAO,CAAC","sourcesContent":["import * as express from 'express';\n\nimport { createRouter } from './express';\nimport { SofaConfig, createSofa } from './sofa';\n\nexport { OpenAPI } from './open-api';\n\nfunction useSofa(config: SofaConfig): express.Router {\n  return createRouter(createSofa(config));\n}\n\nexport { useSofa, createSofa };\nexport default useSofa;\n"]}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAEA,uCAAyC;AACzC,iCAAgD;AAQ9B,qBARG,iBAAU,CAQH;AAN5B,uCAAqC;AAA5B,6BAAA,OAAO,CAAA;AAEhB,SAAS,OAAO,CAAC,MAAkB;IACjC,OAAO,sBAAY,CAAC,iBAAU,CAAC,MAAM,CAAC,CAAC,CAAC;AAC1C,CAAC;AAEQ,0BAAO;AAChB,kBAAe,OAAO,CAAC","sourcesContent":["import * as express from 'express';\n\nimport { createRouter } from './express';\nimport { SofaConfig, createSofa } from './sofa';\n\nexport { OpenAPI } from './open-api';\n\nfunction useSofa(config: SofaConfig): express.Router {\n  return createRouter(createSofa(config));\n}\n\nexport { useSofa, createSofa };\nexport default useSofa;\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/logger.js b/node_modules/sofa-api/dist/logger.js
index b16de82..380ac75 100644
--- a/node_modules/sofa-api/dist/logger.js
+++ b/node_modules/sofa-api/dist/logger.js
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var winston_1 = require("winston");
+const winston_1 = require("winston");
 exports.logger = winston_1.createLogger({
     transports: [new winston_1.transports.Console()],
     format: winston_1.format.combine(winston_1.format.colorize(), winston_1.format.simple()),
diff --git a/node_modules/sofa-api/dist/logger.js.map b/node_modules/sofa-api/dist/logger.js.map
index 808c220..14f4fba 100644
--- a/node_modules/sofa-api/dist/logger.js.map
+++ b/node_modules/sofa-api/dist/logger.js.map
@@ -1 +1 @@
-{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";;AAAA,mCAA2D;AAE9C,QAAA,MAAM,GAAG,sBAAY,CAAC;IACjC,UAAU,EAAE,CAAC,IAAI,oBAAU,CAAC,OAAO,EAAE,CAAC;IACtC,MAAM,EAAE,gBAAM,CAAC,OAAO,CAAC,gBAAM,CAAC,QAAQ,EAAE,EAAE,gBAAM,CAAC,MAAM,EAAE,CAAC;CAC3D,CAAC,CAAC","sourcesContent":["import { createLogger, transports, format } from 'winston';\n\nexport const logger = createLogger({\n  transports: [new transports.Console()],\n  format: format.combine(format.colorize(), format.simple()),\n});\n"]}
\ No newline at end of file
+{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";;AAAA,qCAA2D;AAE9C,QAAA,MAAM,GAAG,sBAAY,CAAC;IACjC,UAAU,EAAE,CAAC,IAAI,oBAAU,CAAC,OAAO,EAAE,CAAC;IACtC,MAAM,EAAE,gBAAM,CAAC,OAAO,CAAC,gBAAM,CAAC,QAAQ,EAAE,EAAE,gBAAM,CAAC,MAAM,EAAE,CAAC;CAC3D,CAAC,CAAC","sourcesContent":["import { createLogger, transports, format } from 'winston';\n\nexport const logger = createLogger({\n  transports: [new transports.Console()],\n  format: format.combine(format.colorize(), format.simple()),\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/open-api/index.js b/node_modules/sofa-api/dist/open-api/index.js
index 6810418..17d83e7 100644
--- a/node_modules/sofa-api/dist/open-api/index.js
+++ b/node_modules/sofa-api/dist/open-api/index.js
@@ -1,47 +1,54 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var graphql_1 = require("graphql");
-var YAML = require("yamljs");
-var fs_1 = require("fs");
-var types_1 = require("./types");
-var operations_1 = require("./operations");
-function OpenAPI(_a) {
-    var schema = _a.schema, info = _a.info;
-    var types = schema.getTypeMap();
-    var swagger = {
+const graphql_1 = require("graphql");
+const YAML = require("yamljs");
+const fs_1 = require("fs");
+const types_1 = require("./types");
+const operations_1 = require("./operations");
+function OpenAPI({ schema, info, }) {
+    const types = schema.getTypeMap();
+    const swagger = {
         openapi: '3.0.0',
-        info: info,
+        info,
         paths: {},
         components: {
             schemas: {},
         },
     };
-    for (var typeName in types) {
-        var type = types[typeName];
-        if (graphql_1.isObjectType(type) && !graphql_1.isIntrospectionType(type)) {
+    for (const typeName in types) {
+        const type = types[typeName];
+        if ((graphql_1.isObjectType(type) || graphql_1.isInputObjectType(type)) &&
+            !graphql_1.isIntrospectionType(type)) {
             swagger.components.schemas[typeName] = types_1.buildSchemaObjectFromType(type);
         }
+        if (graphql_1.isEnumType(type)) {
+            swagger.components.schemas[typeName] = {
+                type: typeName,
+                enum: type.getValues().map(v => v.value)
+            };
+        }
     }
     return {
-        addRoute: function (info, config) {
-            var basePath = (config && config.basePath) || '';
-            var path = basePath +
-                info.path.replace(/\:[a-z0-9]+\w/i, function (param) { return "{" + param.replace(':', '') + "}"; });
+        addRoute(info, config) {
+            const basePath = (config && config.basePath) || '';
+            const path = basePath +
+                info.path.replace(/\:[a-z0-9]+\w/i, param => `{${param.replace(':', '')}}`);
             if (!swagger.paths[path]) {
                 swagger.paths[path] = {};
             }
             swagger.paths[path][info.method.toLowerCase()] = operations_1.buildPathFromOperation({
                 url: path,
                 operation: info.document,
-                schema: schema,
+                schema,
+                useRequestBody: info.method === 'POST'
             });
         },
-        get: function () {
+        get() {
             return swagger;
         },
-        save: function (filepath) {
-            var isJSON = /\.json$/i;
-            var isYAML = /.ya?ml$/i;
+        save(filepath) {
+            const isJSON = /\.json$/i;
+            const isYAML = /.ya?ml$/i;
             if (isJSON.test(filepath)) {
                 writeOutput(filepath, JSON.stringify(swagger, null, 2));
             }
diff --git a/node_modules/sofa-api/dist/open-api/index.js.map b/node_modules/sofa-api/dist/open-api/index.js.map
index 8813e31..c4642c9 100644
--- a/node_modules/sofa-api/dist/open-api/index.js.map
+++ b/node_modules/sofa-api/dist/open-api/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/open-api/index.ts"],"names":[],"mappings":";;AAAA,mCAA2E;AAC3E,6BAA+B;AAC/B,yBAAmC;AAEnC,iCAAoD;AACpD,2CAAsD;AAItD,SAAgB,OAAO,CAAC,EAMvB;QALC,kBAAM,EACN,cAAI;IAKJ,IAAM,KAAK,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IAClC,IAAM,OAAO,GAAQ;QACnB,OAAO,EAAE,OAAO;QAChB,IAAI,MAAA;QACJ,KAAK,EAAE,EAAE;QACT,UAAU,EAAE;YACV,OAAO,EAAE,EAAE;SACZ;KACF,CAAC;IAEF,KAAK,IAAM,QAAQ,IAAI,KAAK,EAAE;QAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;QAE7B,IAAI,sBAAY,CAAC,IAAI,CAAC,IAAI,CAAC,6BAAmB,CAAC,IAAI,CAAC,EAAE;YACpD,OAAO,CAAC,UAAW,CAAC,OAAQ,CAAC,QAAQ,CAAC,GAAG,iCAAyB,CAAC,IAAI,CAAC,CAAC;SAC1E;KACF;IAED,OAAO;QACL,QAAQ,YACN,IAAe,EACf,MAEC;YAED,IAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnD,IAAM,IAAI,GACR,QAAQ;gBACR,IAAI,CAAC,IAAI,CAAC,OAAO,CACf,gBAAgB,EAChB,UAAA,KAAK,IAAI,OAAA,MAAI,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,MAAG,EAA7B,CAA6B,CACvC,CAAC;YAEJ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACxB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;aAC1B;YAED,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,mCAAsB,CAAC;gBACtE,GAAG,EAAE,IAAI;gBACT,SAAS,EAAE,IAAI,CAAC,QAAQ;gBACxB,MAAM,QAAA;aACP,CAAC,CAAC;QACL,CAAC;QACD,GAAG;YACD,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,IAAI,YAAC,QAAgB;YACnB,IAAM,MAAM,GAAG,UAAU,CAAC;YAC1B,IAAM,MAAM,GAAG,UAAU,CAAC;YAE1B,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACzB,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;aACzD;iBAAM,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAChC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;aAChD;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;aACxD;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AAlED,0BAkEC;AAED,SAAS,WAAW,CAAC,QAAgB,EAAE,QAAgB;IACrD,kBAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE;QAChC,QAAQ,EAAE,OAAO;KAClB,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { GraphQLSchema, isObjectType, isIntrospectionType } from 'graphql';\nimport * as YAML from 'yamljs';\nimport { writeFileSync } from 'fs';\n\nimport { buildSchemaObjectFromType } from './types';\nimport { buildPathFromOperation } from './operations';\nimport { RouteInfo } from '../types';\nimport { OpenAPI } from './interfaces';\n\nexport function OpenAPI({\n  schema,\n  info,\n}: {\n  schema: GraphQLSchema;\n  info: Record<string, any>;\n}) {\n  const types = schema.getTypeMap();\n  const swagger: any = {\n    openapi: '3.0.0',\n    info,\n    paths: {},\n    components: {\n      schemas: {},\n    },\n  };\n\n  for (const typeName in types) {\n    const type = types[typeName];\n\n    if (isObjectType(type) && !isIntrospectionType(type)) {\n      swagger.components!.schemas![typeName] = buildSchemaObjectFromType(type);\n    }\n  }\n\n  return {\n    addRoute(\n      info: RouteInfo,\n      config?: {\n        basePath?: string;\n      }\n    ) {\n      const basePath = (config && config.basePath) || '';\n      const path =\n        basePath +\n        info.path.replace(\n          /\\:[a-z0-9]+\\w/i,\n          param => `{${param.replace(':', '')}}`\n        );\n\n      if (!swagger.paths[path]) {\n        swagger.paths[path] = {};\n      }\n\n      swagger.paths[path][info.method.toLowerCase()] = buildPathFromOperation({\n        url: path,\n        operation: info.document,\n        schema,\n      });\n    },\n    get() {\n      return swagger;\n    },\n    save(filepath: string) {\n      const isJSON = /\\.json$/i;\n      const isYAML = /.ya?ml$/i;\n\n      if (isJSON.test(filepath)) {\n        writeOutput(filepath, JSON.stringify(swagger, null, 2));\n      } else if (isYAML.test(filepath)) {\n        writeOutput(filepath, YAML.stringify(swagger));\n      } else {\n        throw new Error('We only support JSON and YAML files');\n      }\n    },\n  };\n}\n\nfunction writeOutput(filepath: string, contents: string) {\n  writeFileSync(filepath, contents, {\n    encoding: 'utf-8',\n  });\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/open-api/index.ts"],"names":[],"mappings":";;AAAA,qCAMiB;AACjB,+BAA+B;AAC/B,2BAAmC;AAEnC,mCAAoD;AACpD,6CAAsD;AAItD,SAAgB,OAAO,CAAC,EACtB,MAAM,EACN,IAAI,GAIL;IACC,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IAClC,MAAM,OAAO,GAAQ;QACnB,OAAO,EAAE,OAAO;QAChB,IAAI;QACJ,KAAK,EAAE,EAAE;QACT,UAAU,EAAE;YACV,OAAO,EAAE,EAAE;SACZ;KACF,CAAC;IAEF,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;QAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;QAE7B,IACE,CAAC,sBAAY,CAAC,IAAI,CAAC,IAAI,2BAAiB,CAAC,IAAI,CAAC,CAAC;YAC/C,CAAC,6BAAmB,CAAC,IAAI,CAAC,EAC1B;YACA,OAAO,CAAC,UAAW,CAAC,OAAQ,CAAC,QAAQ,CAAC,GAAG,iCAAyB,CAAC,IAAI,CAAC,CAAC;SAC1E;QAED,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;YACpB,OAAO,CAAC,UAAW,CAAC,OAAQ,CAAC,QAAQ,CAAC,GAAG;gBACvC,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;aACzC,CAAA;SACF;KACF;IAED,OAAO;QACL,QAAQ,CACN,IAAe,EACf,MAEC;YAED,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnD,MAAM,IAAI,GACR,QAAQ;gBACR,IAAI,CAAC,IAAI,CAAC,OAAO,CACf,gBAAgB,EAChB,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CACvC,CAAC;YAEJ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACxB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;aAC1B;YAED,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,GAAG,mCAAsB,CAAC;gBACtE,GAAG,EAAE,IAAI;gBACT,SAAS,EAAE,IAAI,CAAC,QAAQ;gBACxB,MAAM;gBACN,cAAc,EAAE,IAAI,CAAC,MAAM,KAAK,MAAM;aACvC,CAAC,CAAC;QACL,CAAC;QACD,GAAG;YACD,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,IAAI,CAAC,QAAgB;YACnB,MAAM,MAAM,GAAG,UAAU,CAAC;YAC1B,MAAM,MAAM,GAAG,UAAU,CAAC;YAE1B,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACzB,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;aACzD;iBAAM,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAChC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;aAChD;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;aACxD;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AA7ED,0BA6EC;AAED,SAAS,WAAW,CAAC,QAAgB,EAAE,QAAgB;IACrD,kBAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE;QAChC,QAAQ,EAAE,OAAO;KAClB,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  GraphQLSchema,\n  isObjectType,\n  isInputObjectType,\n  isIntrospectionType,\n  isEnumType,\n} from 'graphql';\nimport * as YAML from 'yamljs';\nimport { writeFileSync } from 'fs';\n\nimport { buildSchemaObjectFromType } from './types';\nimport { buildPathFromOperation } from './operations';\nimport { RouteInfo } from '../types';\nimport { OpenAPI } from './interfaces';\n\nexport function OpenAPI({\n  schema,\n  info,\n}: {\n  schema: GraphQLSchema;\n  info: Record<string, any>;\n}) {\n  const types = schema.getTypeMap();\n  const swagger: any = {\n    openapi: '3.0.0',\n    info,\n    paths: {},\n    components: {\n      schemas: {},\n    },\n  };\n\n  for (const typeName in types) {\n    const type = types[typeName];\n\n    if (\n      (isObjectType(type) || isInputObjectType(type)) &&\n      !isIntrospectionType(type)\n    ) {\n      swagger.components!.schemas![typeName] = buildSchemaObjectFromType(type);\n    }\n\n    if (isEnumType(type)) {\n      swagger.components!.schemas![typeName] = {\n        type: typeName,\n        enum: type.getValues().map(v => v.value)\n      }\n    }\n  }\n\n  return {\n    addRoute(\n      info: RouteInfo,\n      config?: {\n        basePath?: string;\n      }\n    ) {\n      const basePath = (config && config.basePath) || '';\n      const path =\n        basePath +\n        info.path.replace(\n          /\\:[a-z0-9]+\\w/i,\n          param => `{${param.replace(':', '')}}`\n        );\n\n      if (!swagger.paths[path]) {\n        swagger.paths[path] = {};\n      }\n\n      swagger.paths[path][info.method.toLowerCase()] = buildPathFromOperation({\n        url: path,\n        operation: info.document,\n        schema,\n        useRequestBody: info.method === 'POST'\n      });\n    },\n    get() {\n      return swagger;\n    },\n    save(filepath: string) {\n      const isJSON = /\\.json$/i;\n      const isYAML = /.ya?ml$/i;\n\n      if (isJSON.test(filepath)) {\n        writeOutput(filepath, JSON.stringify(swagger, null, 2));\n      } else if (isYAML.test(filepath)) {\n        writeOutput(filepath, YAML.stringify(swagger));\n      } else {\n        throw new Error('We only support JSON and YAML files');\n      }\n    },\n  };\n}\n\nfunction writeOutput(filepath: string, contents: string) {\n  writeFileSync(filepath, contents, {\n    encoding: 'utf-8',\n  });\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/open-api/operations.d.ts b/node_modules/sofa-api/dist/open-api/operations.d.ts
index 2262a05..92c40db 100644
--- a/node_modules/sofa-api/dist/open-api/operations.d.ts
+++ b/node_modules/sofa-api/dist/open-api/operations.d.ts
@@ -1,8 +1,9 @@
 import { DocumentNode, GraphQLSchema } from 'graphql';
-export declare function buildPathFromOperation({ url, schema, operation, }: {
+export declare function buildPathFromOperation({ url, schema, operation, useRequestBody }: {
     url: string;
     schema: GraphQLSchema;
     operation: DocumentNode;
+    useRequestBody: boolean;
 }): {
     operationId: string;
     parameters: {
diff --git a/node_modules/sofa-api/dist/open-api/operations.js b/node_modules/sofa-api/dist/open-api/operations.js
index 99055da..ac0d365 100644
--- a/node_modules/sofa-api/dist/open-api/operations.js
+++ b/node_modules/sofa-api/dist/open-api/operations.js
@@ -1,18 +1,16 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var ast_1 = require("../ast");
-var utils_1 = require("./utils");
-var types_1 = require("./types");
-function buildPathFromOperation(_a) {
-    var url = _a.url, schema = _a.schema, operation = _a.operation;
-    var info = ast_1.getOperationInfo(operation);
-    var isQuery = info.operation.operation === 'query';
+const ast_1 = require("../ast");
+const utils_1 = require("./utils");
+const types_1 = require("./types");
+function buildPathFromOperation({ url, schema, operation, useRequestBody }) {
+    const info = ast_1.getOperationInfo(operation);
     return {
         operationId: info.name,
-        parameters: isQuery
+        parameters: !useRequestBody
             ? resolveParameters(url, info.operation.variableDefinitions)
             : [],
-        requestBody: !isQuery
+        requestBody: useRequestBody
             ? {
                 content: {
                     'application/json': {
@@ -26,7 +24,7 @@ function buildPathFromOperation(_a) {
                 content: {
                     'application/json': {
                         schema: resolveResponse({
-                            schema: schema,
+                            schema,
                             operation: info.operation,
                         }),
                     },
@@ -40,7 +38,7 @@ function resolveParameters(url, variables) {
     if (!variables) {
         return [];
     }
-    return variables.map(function (variable) {
+    return variables.map((variable) => {
         return {
             in: isInPath(url, variable.variable.name.value) ? 'path' : 'query',
             name: variable.variable.name.value,
@@ -53,9 +51,9 @@ function resolveRequestBody(variables) {
     if (!variables) {
         return {};
     }
-    var properties = {};
-    var required = [];
-    variables.forEach(function (variable) {
+    const properties = {};
+    const required = [];
+    variables.forEach(variable => {
         if (variable.type.kind === 'NonNullType') {
             required.push(variable.variable.name.value);
         }
@@ -63,8 +61,8 @@ function resolveRequestBody(variables) {
     });
     return {
         type: 'object',
-        required: required,
-        properties: properties,
+        required,
+        properties,
     };
 }
 // array -> [type]
@@ -80,29 +78,28 @@ function resolveParamSchema(type) {
             items: resolveParamSchema(type.type),
         };
     }
-    var primitive = utils_1.mapToPrimitive(type.name.value);
+    const primitive = utils_1.mapToPrimitive(type.name.value);
     return (primitive || {
         $ref: utils_1.mapToRef(type.name.value),
     });
 }
-function resolveResponse(_a) {
-    var schema = _a.schema, operation = _a.operation;
-    var operationType = operation.operation;
-    var rootField = operation.selectionSet.selections[0];
+function resolveResponse({ schema, operation, }) {
+    const operationType = operation.operation;
+    const rootField = operation.selectionSet.selections[0];
     if (rootField.kind === 'Field') {
         if (operationType === 'query') {
-            var queryType = schema.getQueryType();
-            var field = queryType.getFields()[rootField.name.value];
+            const queryType = schema.getQueryType();
+            const field = queryType.getFields()[rootField.name.value];
             return types_1.resolveFieldType(field.type);
         }
         if (operationType === 'mutation') {
-            var mutationType = schema.getMutationType();
-            var field = mutationType.getFields()[rootField.name.value];
+            const mutationType = schema.getMutationType();
+            const field = mutationType.getFields()[rootField.name.value];
             return types_1.resolveFieldType(field.type);
         }
     }
 }
 function isInPath(url, param) {
-    return url.indexOf("{" + param + "}") !== -1;
+    return url.indexOf(`{${param}}`) !== -1;
 }
 //# sourceMappingURL=operations.js.map
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/open-api/operations.js.map b/node_modules/sofa-api/dist/open-api/operations.js.map
index ec427c3..b456f82 100644
--- a/node_modules/sofa-api/dist/open-api/operations.js.map
+++ b/node_modules/sofa-api/dist/open-api/operations.js.map
@@ -1 +1 @@
-{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../src/open-api/operations.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DocumentNode,\n  GraphQLSchema,\n  VariableDefinitionNode,\n  TypeNode,\n  OperationDefinitionNode,\n} from 'graphql';\n\nimport { getOperationInfo } from '../ast';\nimport { mapToPrimitive, mapToRef } from './utils';\nimport { resolveFieldType } from './types';\n\nexport function buildPathFromOperation({\n  url,\n  schema,\n  operation,\n}: {\n  url: string;\n  schema: GraphQLSchema;\n  operation: DocumentNode;\n}) {\n  const info = getOperationInfo(operation)!;\n  const isQuery = info.operation.operation === 'query';\n\n  return {\n    operationId: info.name,\n    parameters: isQuery\n      ? resolveParameters(url, info.operation.variableDefinitions)\n      : [],\n    requestBody: !isQuery\n      ? {\n          content: {\n            'application/json': {\n              schema: resolveRequestBody(info.operation.variableDefinitions),\n            },\n          },\n        }\n      : undefined,\n    responses: {\n      200: {\n        content: {\n          'application/json': {\n            schema: resolveResponse({\n              schema,\n              operation: info.operation,\n            }),\n          },\n        },\n      },\n    },\n  };\n}\n\nfunction resolveParameters(\n  url: string,\n  variables: ReadonlyArray<VariableDefinitionNode> | undefined\n) {\n  if (!variables) {\n    return [];\n  }\n\n  return variables.map((variable: any) => {\n    return {\n      in: isInPath(url, variable.variable.name.value) ? 'path' : 'query',\n      name: variable.variable.name.value,\n      required: variable.type.kind === 'NonNullType',\n      schema: resolveParamSchema(variable.type),\n    };\n  });\n}\n\nfunction resolveRequestBody(\n  variables: ReadonlyArray<VariableDefinitionNode> | undefined\n) {\n  if (!variables) {\n    return {};\n  }\n\n  const properties: Record<string, any> = {};\n  const required: string[] = [];\n\n  variables.forEach(variable => {\n    if (variable.type.kind === 'NonNullType') {\n      required.push(variable.variable.name.value);\n    }\n\n    properties[variable.variable.name.value] = resolveParamSchema(\n      variable.type\n    );\n  });\n\n  return {\n    type: 'object',\n    required,\n    properties,\n  };\n}\n\n// array -> [type]\n// type -> $ref\n// scalar -> swagger primitive\nfunction resolveParamSchema(type: TypeNode): any {\n  if (type.kind === 'NonNullType') {\n    return resolveParamSchema(type.type);\n  }\n\n  if (type.kind === 'ListType') {\n    return {\n      type: 'array',\n      items: resolveParamSchema(type.type),\n    };\n  }\n\n  const primitive = mapToPrimitive(type.name.value);\n\n  return (\n    primitive || {\n      $ref: mapToRef(type.name.value),\n    }\n  );\n}\n\nfunction resolveResponse({\n  schema,\n  operation,\n}: {\n  schema: GraphQLSchema;\n  operation: OperationDefinitionNode;\n}) {\n  const operationType = operation.operation;\n  const rootField = operation.selectionSet.selections[0];\n\n  if (rootField.kind === 'Field') {\n    if (operationType === 'query') {\n      const queryType = schema.getQueryType()!;\n      const field = queryType.getFields()[rootField.name.value];\n\n      return resolveFieldType(field.type);\n    }\n\n    if (operationType === 'mutation') {\n      const mutationType = schema.getMutationType()!;\n      const field = mutationType.getFields()[rootField.name.value];\n\n      return resolveFieldType(field.type);\n    }\n  }\n}\n\nfunction isInPath(url: string, param: string): boolean {\n  return url.indexOf(`{${param}}`) !== -1;\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../src/open-api/operations.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DocumentNode,\n  GraphQLSchema,\n  VariableDefinitionNode,\n  TypeNode,\n  OperationDefinitionNode,\n} from 'graphql';\n\nimport { getOperationInfo } from '../ast';\nimport { mapToPrimitive, mapToRef } from './utils';\nimport { resolveFieldType } from './types';\n\nexport function buildPathFromOperation({\n  url,\n  schema,\n  operation,\n  useRequestBody\n}: {\n  url: string;\n  schema: GraphQLSchema;\n  operation: DocumentNode;\n  useRequestBody: boolean;\n}) {\n  const info = getOperationInfo(operation)!;\n\n  return {\n    operationId: info.name,\n    parameters: !useRequestBody\n      ? resolveParameters(url, info.operation.variableDefinitions)\n      : [],\n    requestBody: useRequestBody\n      ? {\n          content: {\n            'application/json': {\n              schema: resolveRequestBody(info.operation.variableDefinitions),\n            },\n          },\n        }\n      : undefined,\n    responses: {\n      200: {\n        content: {\n          'application/json': {\n            schema: resolveResponse({\n              schema,\n              operation: info.operation,\n            }),\n          },\n        },\n      },\n    },\n  };\n}\n\nfunction resolveParameters(\n  url: string,\n  variables: ReadonlyArray<VariableDefinitionNode> | undefined\n) {\n  if (!variables) {\n    return [];\n  }\n\n  return variables.map((variable: any) => {\n    return {\n      in: isInPath(url, variable.variable.name.value) ? 'path' : 'query',\n      name: variable.variable.name.value,\n      required: variable.type.kind === 'NonNullType',\n      schema: resolveParamSchema(variable.type),\n    };\n  });\n}\n\nfunction resolveRequestBody(\n  variables: ReadonlyArray<VariableDefinitionNode> | undefined\n) {\n  if (!variables) {\n    return {};\n  }\n\n  const properties: Record<string, any> = {};\n  const required: string[] = [];\n\n  variables.forEach(variable => {\n    if (variable.type.kind === 'NonNullType') {\n      required.push(variable.variable.name.value);\n    }\n\n    properties[variable.variable.name.value] = resolveParamSchema(\n      variable.type\n    );\n  });\n\n  return {\n    type: 'object',\n    required,\n    properties,\n  };\n}\n\n// array -> [type]\n// type -> $ref\n// scalar -> swagger primitive\nfunction resolveParamSchema(type: TypeNode): any {\n  if (type.kind === 'NonNullType') {\n    return resolveParamSchema(type.type);\n  }\n\n  if (type.kind === 'ListType') {\n    return {\n      type: 'array',\n      items: resolveParamSchema(type.type),\n    };\n  }\n\n  const primitive = mapToPrimitive(type.name.value);\n\n  return (\n    primitive || {\n      $ref: mapToRef(type.name.value),\n    }\n  );\n}\n\nfunction resolveResponse({\n  schema,\n  operation,\n}: {\n  schema: GraphQLSchema;\n  operation: OperationDefinitionNode;\n}) {\n  const operationType = operation.operation;\n  const rootField = operation.selectionSet.selections[0];\n\n  if (rootField.kind === 'Field') {\n    if (operationType === 'query') {\n      const queryType = schema.getQueryType()!;\n      const field = queryType.getFields()[rootField.name.value];\n\n      return resolveFieldType(field.type);\n    }\n\n    if (operationType === 'mutation') {\n      const mutationType = schema.getMutationType()!;\n      const field = mutationType.getFields()[rootField.name.value];\n\n      return resolveFieldType(field.type);\n    }\n  }\n}\n\nfunction isInPath(url: string, param: string): boolean {\n  return url.indexOf(`{${param}}`) !== -1;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/open-api/types.d.ts b/node_modules/sofa-api/dist/open-api/types.d.ts
index 0b130eb..be9c97e 100644
--- a/node_modules/sofa-api/dist/open-api/types.d.ts
+++ b/node_modules/sofa-api/dist/open-api/types.d.ts
@@ -1,3 +1,3 @@
-import { GraphQLObjectType, GraphQLOutputType, GraphQLNamedType } from 'graphql';
-export declare function buildSchemaObjectFromType(type: GraphQLObjectType): any;
+import { GraphQLObjectType, GraphQLInputObjectType, GraphQLOutputType, GraphQLNamedType } from 'graphql';
+export declare function buildSchemaObjectFromType(type: GraphQLObjectType | GraphQLInputObjectType): any;
 export declare function resolveFieldType(type: GraphQLOutputType | GraphQLNamedType): any;
diff --git a/node_modules/sofa-api/dist/open-api/types.js b/node_modules/sofa-api/dist/open-api/types.js
index 5bf6c2a..1545dd4 100644
--- a/node_modules/sofa-api/dist/open-api/types.js
+++ b/node_modules/sofa-api/dist/open-api/types.js
@@ -1,13 +1,13 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var graphql_1 = require("graphql");
-var utils_1 = require("./utils");
+const graphql_1 = require("graphql");
+const utils_1 = require("./utils");
 function buildSchemaObjectFromType(type) {
-    var required = [];
-    var properties = {};
-    var fields = type.getFields();
-    for (var fieldName in fields) {
-        var field = fields[fieldName];
+    const required = [];
+    const properties = {};
+    const fields = type.getFields();
+    for (const fieldName in fields) {
+        const field = fields[fieldName];
         if (graphql_1.isNonNullType(field.type)) {
             required.push(field.name);
         }
@@ -15,8 +15,8 @@ function buildSchemaObjectFromType(type) {
     }
     return {
         type: 'object',
-        required: required,
-        properties: properties,
+        required,
+        properties,
     };
 }
 exports.buildSchemaObjectFromType = buildSchemaObjectFromType;
diff --git a/node_modules/sofa-api/dist/open-api/types.js.map b/node_modules/sofa-api/dist/open-api/types.js.map
index b55c657..737128c 100644
--- a/node_modules/sofa-api/dist/open-api/types.js.map
+++ b/node_modules/sofa-api/dist/open-api/types.js.map
@@ -1 +1 @@
-{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/open-api/types.ts"],"names":[],"mappings":";;AAAA,mCASiB;AACjB,iCAAmD;AAEnD,SAAgB,yBAAyB,CAAC,IAAuB;IAC/D,IAAM,QAAQ,GAAa,EAAE,CAAC;IAC9B,IAAM,UAAU,GAAwB,EAAE,CAAC;IAE3C,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;IAEhC,KAAK,IAAM,SAAS,IAAI,MAAM,EAAE;QAC9B,IAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;QAEhC,IAAI,uBAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAC7B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3B;QAED,UAAU,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;KAC7C;IAED,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,QAAQ,UAAA;QACR,UAAU,YAAA;KACX,CAAC;AACJ,CAAC;AArBD,8DAqBC;AAED,SAAS,YAAY,CAAC,KAA6B;IACjD,OAAO,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACtC,CAAC;AAED,kBAAkB;AAClB,eAAe;AACf,8BAA8B;AAC9B,SAAgB,gBAAgB,CAC9B,IAA0C;IAE1C,IAAI,uBAAa,CAAC,IAAI,CAAC,EAAE;QACvB,OAAO,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACtC;IAED,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO;YACL,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC;SACrC,CAAC;KACH;IAED,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO;YACL,IAAI,EAAE,gBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;SAC1B,CAAC;KACH;IAED,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,CACL,sBAAc,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;YAC3B,IAAI,EAAE,QAAQ;SACf,CACF,CAAC;KACH;IAED,OAAO;QACL,IAAI,EAAE,QAAQ;KACf,CAAC;AACJ,CAAC;AA/BD,4CA+BC","sourcesContent":["import {\n  GraphQLObjectType,\n  GraphQLField,\n  isNonNullType,\n  GraphQLOutputType,\n  isListType,\n  isObjectType,\n  isScalarType,\n  GraphQLNamedType,\n} from 'graphql';\nimport { mapToPrimitive, mapToRef } from './utils';\n\nexport function buildSchemaObjectFromType(type: GraphQLObjectType): any {\n  const required: string[] = [];\n  const properties: Record<string, any> = {};\n\n  const fields = type.getFields();\n\n  for (const fieldName in fields) {\n    const field = fields[fieldName];\n\n    if (isNonNullType(field.type)) {\n      required.push(field.name);\n    }\n\n    properties[fieldName] = resolveField(field);\n  }\n\n  return {\n    type: 'object',\n    required,\n    properties,\n  };\n}\n\nfunction resolveField(field: GraphQLField<any, any>) {\n  return resolveFieldType(field.type);\n}\n\n// array -> [type]\n// type -> $ref\n// scalar -> swagger primitive\nexport function resolveFieldType(\n  type: GraphQLOutputType | GraphQLNamedType\n): any {\n  if (isNonNullType(type)) {\n    return resolveFieldType(type.ofType);\n  }\n\n  if (isListType(type)) {\n    return {\n      type: 'array',\n      items: resolveFieldType(type.ofType),\n    };\n  }\n\n  if (isObjectType(type)) {\n    return {\n      $ref: mapToRef(type.name),\n    };\n  }\n\n  if (isScalarType(type)) {\n    return (\n      mapToPrimitive(type.name) || {\n        type: 'object',\n      }\n    );\n  }\n\n  return {\n    type: 'object',\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/open-api/types.ts"],"names":[],"mappings":";;AAAA,qCAWiB;AACjB,mCAAmD;AAEnD,SAAgB,yBAAyB,CACvC,IAAgD;IAEhD,MAAM,QAAQ,GAAa,EAAE,CAAC;IAC9B,MAAM,UAAU,GAAwB,EAAE,CAAC;IAE3C,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;IAEhC,KAAK,MAAM,SAAS,IAAI,MAAM,EAAE;QAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;QAEhC,IAAI,uBAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;YAC7B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3B;QAED,UAAU,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;KAC7C;IAED,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,QAAQ;QACR,UAAU;KACX,CAAC;AACJ,CAAC;AAvBD,8DAuBC;AAED,SAAS,YAAY,CAAC,KAAiD;IACrE,OAAO,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACtC,CAAC;AAED,kBAAkB;AAClB,eAAe;AACf,8BAA8B;AAC9B,SAAgB,gBAAgB,CAC9B,IAA0C;IAE1C,IAAI,uBAAa,CAAC,IAAI,CAAC,EAAE;QACvB,OAAO,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACtC;IAED,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO;YACL,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC;SACrC,CAAC;KACH;IAED,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO;YACL,IAAI,EAAE,gBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;SAC1B,CAAC;KACH;IAED,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,CACL,sBAAc,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;YAC3B,IAAI,EAAE,QAAQ;SACf,CACF,CAAC;KACH;IAED,OAAO;QACL,IAAI,EAAE,QAAQ;KACf,CAAC;AACJ,CAAC;AA/BD,4CA+BC","sourcesContent":["import {\n  GraphQLObjectType,\n  GraphQLInputObjectType,\n  GraphQLField,\n  GraphQLInputField,\n  isNonNullType,\n  GraphQLOutputType,\n  isListType,\n  isObjectType,\n  isScalarType,\n  GraphQLNamedType,\n} from 'graphql';\nimport { mapToPrimitive, mapToRef } from './utils';\n\nexport function buildSchemaObjectFromType(\n  type: GraphQLObjectType | GraphQLInputObjectType\n): any {\n  const required: string[] = [];\n  const properties: Record<string, any> = {};\n\n  const fields = type.getFields();\n\n  for (const fieldName in fields) {\n    const field = fields[fieldName];\n\n    if (isNonNullType(field.type)) {\n      required.push(field.name);\n    }\n\n    properties[fieldName] = resolveField(field);\n  }\n\n  return {\n    type: 'object',\n    required,\n    properties,\n  };\n}\n\nfunction resolveField(field: GraphQLField<any, any> | GraphQLInputField) {\n  return resolveFieldType(field.type);\n}\n\n// array -> [type]\n// type -> $ref\n// scalar -> swagger primitive\nexport function resolveFieldType(\n  type: GraphQLOutputType | GraphQLNamedType\n): any {\n  if (isNonNullType(type)) {\n    return resolveFieldType(type.ofType);\n  }\n\n  if (isListType(type)) {\n    return {\n      type: 'array',\n      items: resolveFieldType(type.ofType),\n    };\n  }\n\n  if (isObjectType(type)) {\n    return {\n      $ref: mapToRef(type.name),\n    };\n  }\n\n  if (isScalarType(type)) {\n    return (\n      mapToPrimitive(type.name) || {\n        type: 'object',\n      }\n    );\n  }\n\n  return {\n    type: 'object',\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/open-api/utils.js b/node_modules/sofa-api/dist/open-api/utils.js
index b99505b..1f7f301 100644
--- a/node_modules/sofa-api/dist/open-api/utils.js
+++ b/node_modules/sofa-api/dist/open-api/utils.js
@@ -1,7 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 function mapToPrimitive(type) {
-    var formatMap = {
+    const formatMap = {
         Int: {
             type: 'integer',
             format: 'int32',
@@ -23,7 +23,7 @@ function mapToPrimitive(type) {
 }
 exports.mapToPrimitive = mapToPrimitive;
 function mapToRef(type) {
-    return "#/components/schemas/" + type;
+    return `#/components/schemas/${type}`;
 }
 exports.mapToRef = mapToRef;
 //# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/open-api/utils.js.map b/node_modules/sofa-api/dist/open-api/utils.js.map
index 7c155c7..caffd06 100644
--- a/node_modules/sofa-api/dist/open-api/utils.js.map
+++ b/node_modules/sofa-api/dist/open-api/utils.js.map
@@ -1 +1 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/open-api/utils.ts"],"names":[],"mappings":";;AAAA,SAAgB,cAAc,CAAC,IAAY;IACzC,IAAM,SAAS,GAAwB;QACrC,GAAG,EAAE;YACH,IAAI,EAAE,SAAS;YACf,MAAM,EAAE,OAAO;SAChB;QACD,KAAK,EAAE;YACL,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,OAAO;SAChB;QACD,MAAM,EAAE;YACN,IAAI,EAAE,QAAQ;SACf;QACD,OAAO,EAAE;YACP,IAAI,EAAE,SAAS;SAChB;KACF,CAAC;IAEF,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;QACnB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;KACxB;AACH,CAAC;AArBD,wCAqBC;AAED,SAAgB,QAAQ,CAAC,IAAY;IACnC,OAAO,0BAAwB,IAAM,CAAC;AACxC,CAAC;AAFD,4BAEC","sourcesContent":["export function mapToPrimitive(type: string) {\n  const formatMap: Record<string, any> = {\n    Int: {\n      type: 'integer',\n      format: 'int32',\n    },\n    Float: {\n      type: 'number',\n      format: 'float',\n    },\n    String: {\n      type: 'string',\n    },\n    Boolean: {\n      type: 'boolean',\n    },\n  };\n\n  if (formatMap[type]) {\n    return formatMap[type];\n  }\n}\n\nexport function mapToRef(type: string) {\n  return `#/components/schemas/${type}`;\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/open-api/utils.ts"],"names":[],"mappings":";;AAAA,SAAgB,cAAc,CAAC,IAAY;IACzC,MAAM,SAAS,GAAwB;QACrC,GAAG,EAAE;YACH,IAAI,EAAE,SAAS;YACf,MAAM,EAAE,OAAO;SAChB;QACD,KAAK,EAAE;YACL,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,OAAO;SAChB;QACD,MAAM,EAAE;YACN,IAAI,EAAE,QAAQ;SACf;QACD,OAAO,EAAE;YACP,IAAI,EAAE,SAAS;SAChB;KACF,CAAC;IAEF,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;QACnB,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;KACxB;AACH,CAAC;AArBD,wCAqBC;AAED,SAAgB,QAAQ,CAAC,IAAY;IACnC,OAAO,wBAAwB,IAAI,EAAE,CAAC;AACxC,CAAC;AAFD,4BAEC","sourcesContent":["export function mapToPrimitive(type: string) {\n  const formatMap: Record<string, any> = {\n    Int: {\n      type: 'integer',\n      format: 'int32',\n    },\n    Float: {\n      type: 'number',\n      format: 'float',\n    },\n    String: {\n      type: 'string',\n    },\n    Boolean: {\n      type: 'boolean',\n    },\n  };\n\n  if (formatMap[type]) {\n    return formatMap[type];\n  }\n}\n\nexport function mapToRef(type: string) {\n  return `#/components/schemas/${type}`;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/operation.js b/node_modules/sofa-api/dist/operation.js
index 67173d6..55c80f7 100644
--- a/node_modules/sofa-api/dist/operation.js
+++ b/node_modules/sofa-api/dist/operation.js
@@ -1,9 +1,9 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var graphql_1 = require("graphql");
-var changeCase = require("change-case");
-var logger_1 = require("./logger");
-var operationVariables = [];
+const graphql_1 = require("graphql");
+const changeCase = require("change-case");
+const logger_1 = require("./logger");
+let operationVariables = [];
 function addOperationVariable(variable) {
     operationVariables.push(variable);
 }
@@ -13,40 +13,40 @@ function resetOperationVariables() {
 function buildOperationName(name) {
     return changeCase.camel(name);
 }
-function buildOperation(_a) {
-    var schema = _a.schema, kind = _a.kind, field = _a.field, models = _a.models, ignore = _a.ignore, depthLimit = _a.depthLimit;
+function buildOperation({ schema, kind, field, models, ignore, depthLimit, }) {
     resetOperationVariables();
-    logger_1.logger.debug("[Sofa] Building " + field + " " + kind);
-    var document = buildDocumentNode({
-        schema: schema,
+    logger_1.logger.debug(`[Sofa] Building ${field} ${kind}`);
+    const document = buildDocumentNode({
+        schema,
         fieldName: field,
-        kind: kind,
-        models: models,
-        ignore: ignore,
+        kind,
+        models,
+        ignore,
         depthLimit: depthLimit || 1,
     });
     // attach variables
-    document.definitions[0].variableDefinitions = operationVariables.slice();
+    document.definitions[0].variableDefinitions = [
+        ...operationVariables,
+    ];
     resetOperationVariables();
     return document;
 }
 exports.buildOperation = buildOperation;
-function buildDocumentNode(_a) {
-    var schema = _a.schema, fieldName = _a.fieldName, kind = _a.kind, models = _a.models, ignore = _a.ignore, depthLimit = _a.depthLimit;
-    var typeMap = {
+function buildDocumentNode({ schema, fieldName, kind, models, ignore, depthLimit, }) {
+    const typeMap = {
         query: schema.getQueryType(),
         mutation: schema.getMutationType(),
         subscription: schema.getSubscriptionType(),
     };
-    var type = typeMap[kind];
-    var field = type.getFields()[fieldName];
-    var operationName = buildOperationName(fieldName + "_" + kind);
+    const type = typeMap[kind];
+    const field = type.getFields()[fieldName];
+    const operationName = buildOperationName(`${fieldName}_${kind}`);
     if (field.args) {
-        field.args.forEach(function (arg) {
+        field.args.forEach(arg => {
             addOperationVariable(resolveVariable(arg));
         });
     }
-    var operationNode = {
+    const operationNode = {
         kind: 'OperationDefinition',
         operation: kind,
         name: {
@@ -58,38 +58,35 @@ function buildDocumentNode(_a) {
             kind: 'SelectionSet',
             selections: [
                 resolveField({
-                    type: type,
-                    field: field,
-                    models: models,
+                    type,
+                    field,
+                    models,
                     firstCall: true,
                     path: [],
                     ancestors: [],
-                    ignore: ignore,
-                    depthLimit: depthLimit,
+                    ignore,
+                    depthLimit,
                 }),
             ],
         },
     };
-    var document = {
+    const document = {
         kind: 'Document',
         definitions: [operationNode],
     };
     return document;
 }
-function resolveSelectionSet(_a) {
-    var parent = _a.parent, type = _a.type, models = _a.models, firstCall = _a.firstCall, path = _a.path, ancestors = _a.ancestors, ignore = _a.ignore, depthLimit = _a.depthLimit;
+function resolveSelectionSet({ parent, type, models, firstCall, path, ancestors, ignore, depthLimit, }) {
     if (graphql_1.isUnionType(type)) {
-        var types = type.getTypes();
+        const types = type.getTypes();
         return {
             kind: 'SelectionSet',
             selections: types
-                .filter(function (t) {
-                return !hasCircularRef(ancestors.concat([t]), {
-                    depth: depthLimit,
-                });
-            })
-                .map(function (t) {
-                var fields = t.getFields();
+                .filter(t => !hasCircularRef([...ancestors, t], {
+                depth: depthLimit,
+            }))
+                .map(t => {
+                const fields = t.getFields();
                 return {
                     kind: 'InlineFragment',
                     typeCondition: {
@@ -101,15 +98,15 @@ function resolveSelectionSet(_a) {
                     },
                     selectionSet: {
                         kind: 'SelectionSet',
-                        selections: Object.keys(fields).map(function (fieldName) {
+                        selections: Object.keys(fields).map(fieldName => {
                             return resolveField({
                                 type: t,
                                 field: fields[fieldName],
-                                models: models,
-                                path: path.concat([fieldName]),
-                                ancestors: ancestors,
-                                ignore: ignore,
-                                depthLimit: depthLimit,
+                                models,
+                                path: [...path, fieldName],
+                                ancestors,
+                                ignore,
+                                depthLimit,
                             });
                         }),
                     },
@@ -118,9 +115,9 @@ function resolveSelectionSet(_a) {
         };
     }
     if (graphql_1.isObjectType(type)) {
-        var isIgnored = ignore.includes(type.name) ||
-            ignore.includes(parent.name + "." + path[path.length - 1]);
-        var isModel = models.includes(type.name);
+        const isIgnored = ignore.includes(type.name) ||
+            ignore.includes(`${parent.name}.${path[path.length - 1]}`);
+        const isModel = models.includes(type.name);
         if (!firstCall && isModel && !isIgnored) {
             return {
                 kind: 'SelectionSet',
@@ -135,24 +132,24 @@ function resolveSelectionSet(_a) {
                 ],
             };
         }
-        var fields_1 = type.getFields();
+        const fields = type.getFields();
         return {
             kind: 'SelectionSet',
-            selections: Object.keys(fields_1)
-                .filter(function (fieldName) {
-                return !hasCircularRef(ancestors.concat([graphql_1.getNamedType(fields_1[fieldName].type)]), {
+            selections: Object.keys(fields)
+                .filter(fieldName => {
+                return !hasCircularRef([...ancestors, graphql_1.getNamedType(fields[fieldName].type)], {
                     depth: depthLimit,
                 });
             })
-                .map(function (fieldName) {
+                .map(fieldName => {
                 return resolveField({
                     type: type,
-                    field: fields_1[fieldName],
-                    models: models,
-                    path: path.concat([fieldName]),
-                    ancestors: ancestors,
-                    ignore: ignore,
-                    depthLimit: depthLimit,
+                    field: fields[fieldName],
+                    models,
+                    path: [...path, fieldName],
+                    ancestors,
+                    ignore,
+                    depthLimit,
                 });
             }),
         };
@@ -193,14 +190,13 @@ function resolveVariable(arg, name) {
     };
 }
 function getArgumentName(name, path) {
-    return changeCase.camel(path.concat([name]).join('_'));
+    return changeCase.camel([...path, name].join('_'));
 }
-function resolveField(_a) {
-    var type = _a.type, field = _a.field, models = _a.models, firstCall = _a.firstCall, path = _a.path, ancestors = _a.ancestors, ignore = _a.ignore, depthLimit = _a.depthLimit;
-    var namedType = graphql_1.getNamedType(field.type);
-    var args = [];
+function resolveField({ type, field, models, firstCall, path, ancestors, ignore, depthLimit, }) {
+    const namedType = graphql_1.getNamedType(field.type);
+    let args = [];
     if (field.args && field.args.length) {
-        args = field.args.map(function (arg) {
+        args = field.args.map(arg => {
             if (!firstCall) {
                 addOperationVariable(resolveVariable(arg, getArgumentName(arg.name, path)));
             }
@@ -230,12 +226,12 @@ function resolveField(_a) {
             selectionSet: resolveSelectionSet({
                 parent: type,
                 type: namedType,
-                models: models,
-                firstCall: firstCall,
-                path: path.concat([field.name]),
-                ancestors: ancestors.concat([type]),
-                ignore: ignore,
-                depthLimit: depthLimit,
+                models,
+                firstCall,
+                path: [...path, field.name],
+                ancestors: [...ancestors, type],
+                ignore,
+                depthLimit,
             }),
             arguments: args,
         };
@@ -249,15 +245,14 @@ function resolveField(_a) {
         arguments: args,
     };
 }
-function hasCircularRef(types, config) {
-    if (config === void 0) { config = {
-        depth: 1,
-    }; }
-    var type = types[types.length - 1];
+function hasCircularRef(types, config = {
+    depth: 1,
+}) {
+    const type = types[types.length - 1];
     if (graphql_1.isScalarType(type)) {
         return false;
     }
-    var size = types.filter(function (t) { return t.name === type.name; }).length;
+    const size = types.filter(t => t.name === type.name).length;
     return size > config.depth;
 }
 //# sourceMappingURL=operation.js.map
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/operation.js.map b/node_modules/sofa-api/dist/operation.js.map
index 1a9f8cb..973d57b 100644
--- a/node_modules/sofa-api/dist/operation.js.map
+++ b/node_modules/sofa-api/dist/operation.js.map
@@ -1 +1 @@
-{"version":3,"file":"operation.js","sourceRoot":"","sources":["../src/operation.ts"],"names":[],"mappings":";;AAAA,mCA0BiB;AACjB,wCAA0C;AAG1C,mCAAkC;AAElC,IAAI,kBAAkB,GAA6B,EAAE,CAAC;AAEtD,SAAS,oBAAoB,CAAC,QAAgC;IAC5D,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC;AAED,SAAS,uBAAuB;IAC9B,kBAAkB,GAAG,EAAE,CAAC;AAC1B,CAAC;AAED,SAAS,kBAAkB,CAAC,IAAY;IACtC,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC;AAKD,SAAgB,cAAc,CAAC,EAc9B;QAbC,kBAAM,EACN,cAAI,EACJ,gBAAK,EACL,kBAAM,EACN,kBAAM,EACN,0BAAU;IASV,uBAAuB,EAAE,CAAC;IAE1B,eAAM,CAAC,KAAK,CAAC,qBAAmB,KAAK,SAAI,IAAM,CAAC,CAAC;IAEjD,IAAM,QAAQ,GAAG,iBAAiB,CAAC;QACjC,MAAM,QAAA;QACN,SAAS,EAAE,KAAK;QAChB,IAAI,MAAA;QACJ,MAAM,QAAA;QACN,MAAM,QAAA;QACN,UAAU,EAAE,UAAU,IAAI,CAAC;KAC5B,CAAC,CAAC;IAEH,mBAAmB;IAClB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAS,CAAC,mBAAmB,GAC/C,kBAAkB,QACtB,CAAC;IAEF,uBAAuB,EAAE,CAAC;IAE1B,OAAO,QAAQ,CAAC;AAClB,CAAC;AApCD,wCAoCC;AAED,SAAS,iBAAiB,CAAC,EAc1B;QAbC,kBAAM,EACN,wBAAS,EACT,cAAI,EACJ,kBAAM,EACN,kBAAM,EACN,0BAAU;IASV,IAAM,OAAO,GAAiD;QAC5D,KAAK,EAAE,MAAM,CAAC,YAAY,EAAG;QAC7B,QAAQ,EAAE,MAAM,CAAC,eAAe,EAAG;QACnC,YAAY,EAAE,MAAM,CAAC,mBAAmB,EAAG;KAC5C,CAAC;IACF,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAC3B,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,CAAC;IAC1C,IAAM,aAAa,GAAG,kBAAkB,CAAI,SAAS,SAAI,IAAM,CAAC,CAAC;IAEjE,IAAI,KAAK,CAAC,IAAI,EAAE;QACd,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;YACpB,oBAAoB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;KACJ;IAED,IAAM,aAAa,GAA4B;QAC7C,IAAI,EAAE,qBAAqB;QAC3B,SAAS,EAAE,IAAI;QACf,IAAI,EAAE;YACJ,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,aAAa;SACrB;QACD,mBAAmB,EAAE,EAAE;QACvB,YAAY,EAAE;YACZ,IAAI,EAAE,cAAc;YACpB,UAAU,EAAE;gBACV,YAAY,CAAC;oBACX,IAAI,MAAA;oBACJ,KAAK,OAAA;oBACL,MAAM,QAAA;oBACN,SAAS,EAAE,IAAI;oBACf,IAAI,EAAE,EAAE;oBACR,SAAS,EAAE,EAAE;oBACb,MAAM,QAAA;oBACN,UAAU,YAAA;iBACX,CAAC;aACH;SACF;KACF,CAAC;IACF,IAAM,QAAQ,GAAiB;QAC7B,IAAI,EAAE,UAAU;QAChB,WAAW,EAAE,CAAC,aAAa,CAAC;KAC7B,CAAC;IAEF,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAS,mBAAmB,CAAC,EAkB5B;QAjBC,kBAAM,EACN,cAAI,EACJ,kBAAM,EACN,wBAAS,EACT,cAAI,EACJ,wBAAS,EACT,kBAAM,EACN,0BAAU;IAWV,IAAI,qBAAW,CAAC,IAAI,CAAC,EAAE;QACrB,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE9B,OAAO;YACL,IAAI,EAAE,cAAc;YACpB,UAAU,EAAE,KAAK;iBACd,MAAM,CACL,UAAA,CAAC;gBACC,OAAA,CAAC,cAAc,CAAK,SAAS,SAAE,CAAC,IAAG;oBACjC,KAAK,EAAE,UAAU;iBAClB,CAAC;YAFF,CAEE,CACL;iBACA,GAAG,CAAqB,UAAA,CAAC;gBACxB,IAAM,MAAM,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;gBAE7B,OAAO;oBACL,IAAI,EAAE,gBAAgB;oBACtB,aAAa,EAAE;wBACb,IAAI,EAAE,WAAW;wBACjB,IAAI,EAAE;4BACJ,IAAI,EAAE,MAAM;4BACZ,KAAK,EAAE,CAAC,CAAC,IAAI;yBACd;qBACF;oBACD,YAAY,EAAE;wBACZ,IAAI,EAAE,cAAc;wBACpB,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS;4BAC3C,OAAO,YAAY,CAAC;gCAClB,IAAI,EAAE,CAAC;gCACP,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC;gCACxB,MAAM,QAAA;gCACN,IAAI,EAAM,IAAI,SAAE,SAAS,EAAC;gCAC1B,SAAS,WAAA;gCACT,MAAM,QAAA;gCACN,UAAU,YAAA;6BACX,CAAC,CAAC;wBACL,CAAC,CAAC;qBACH;iBACF,CAAC;YACJ,CAAC,CAAC;SACL,CAAC;KACH;IAED,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,IAAM,SAAS,GACb,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1B,MAAM,CAAC,QAAQ,CAAI,MAAM,CAAC,IAAI,SAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAG,CAAC,CAAC;QAC7D,IAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3C,IAAI,CAAC,SAAS,IAAI,OAAO,IAAI,CAAC,SAAS,EAAE;YACvC,OAAO;gBACL,IAAI,EAAE,cAAc;gBACpB,UAAU,EAAE;oBACV;wBACE,IAAI,EAAE,OAAO;wBACb,IAAI,EAAE;4BACJ,IAAI,EAAE,MAAM;4BACZ,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF;aACF,CAAC;SACH;QAED,IAAM,QAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAEhC,OAAO;YACL,IAAI,EAAE,cAAc;YACpB,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,QAAM,CAAC;iBAC5B,MAAM,CAAC,UAAA,SAAS;gBACf,OAAO,CAAC,cAAc,CAChB,SAAS,SAAE,sBAAY,CAAC,QAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IACnD;oBACE,KAAK,EAAE,UAAU;iBAClB,CACF,CAAC;YACJ,CAAC,CAAC;iBACD,GAAG,CAAC,UAAA,SAAS;gBACZ,OAAO,YAAY,CAAC;oBAClB,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,QAAM,CAAC,SAAS,CAAC;oBACxB,MAAM,QAAA;oBACN,IAAI,EAAM,IAAI,SAAE,SAAS,EAAC;oBAC1B,SAAS,WAAA;oBACT,MAAM,QAAA;oBACN,UAAU,YAAA;iBACX,CAAC,CAAC;YACL,CAAC,CAAC;SACL,CAAC;KACH;AACH,CAAC;AAED,SAAS,eAAe,CACtB,GAAoB,EACpB,IAAa;IAKb,SAAS,mBAAmB,CAAC,IAAsB;QACjD,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE;YACpB,OAAO;gBACL,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC;aACvC,CAAC;SACH;QAED,IAAI,uBAAa,CAAC,IAAI,CAAC,EAAE;YACvB,OAAO;gBACL,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC;aACvC,CAAC;SACH;QAED,OAAO;YACL,IAAI,EAAE,WAAW;YACjB,IAAI,EAAE;gBACJ,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,IAAI,CAAC,IAAI;aACjB;SACF,CAAC;IACJ,CAAC;IAED,OAAO;QACL,IAAI,EAAE,oBAAoB;QAC1B,QAAQ,EAAE;YACR,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE;gBACJ,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,IAAI,IAAI,GAAG,CAAC,IAAI;aACxB;SACF;QACD,IAAI,EAAE,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC;KACpC,CAAC;AACJ,CAAC;AAED,SAAS,eAAe,CAAC,IAAY,EAAE,IAAc;IACnD,OAAO,UAAU,CAAC,KAAK,CAAK,IAAI,SAAE,IAAI,GAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACrD,CAAC;AAED,SAAS,YAAY,CAAC,EAkBrB;QAjBC,cAAI,EACJ,gBAAK,EACL,kBAAM,EACN,wBAAS,EACT,cAAI,EACJ,wBAAS,EACT,kBAAM,EACN,0BAAU;IAWV,IAAM,SAAS,GAAG,sBAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC3C,IAAI,IAAI,GAAmB,EAAE,CAAC;IAE9B,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;QACnC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAe,UAAA,GAAG;YACrC,IAAI,CAAC,SAAS,EAAE;gBACd,oBAAoB,CAClB,eAAe,CAAC,GAAG,EAAE,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CACtD,CAAC;aACH;YAED,OAAO;gBACL,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,KAAK,EAAE,GAAG,CAAC,IAAI;iBAChB;gBACD,KAAK,EAAE;oBACL,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE;wBACJ,IAAI,EAAE,MAAM;wBACZ,KAAK,EAAE,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;qBACvC;iBACF;aACF,CAAC;QACJ,CAAC,CAAC,CAAC;KACJ;IAED,IAAI,CAAC,sBAAY,CAAC,SAAS,CAAC,EAAE;QAC5B,OAAO;YACL,IAAI,EAAE,OAAO;YACb,IAAI,EAAE;gBACJ,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,KAAK,CAAC,IAAI;aAClB;YACD,YAAY,EAAE,mBAAmB,CAAC;gBAChC,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE,SAAS;gBACf,MAAM,QAAA;gBACN,SAAS,WAAA;gBACT,IAAI,EAAM,IAAI,SAAE,KAAK,CAAC,IAAI,EAAC;gBAC3B,SAAS,EAAM,SAAS,SAAE,IAAI,EAAC;gBAC/B,MAAM,QAAA;gBACN,UAAU,YAAA;aACX,CAAC;YACF,SAAS,EAAE,IAAI;SAChB,CAAC;KACH;IAED,OAAO;QACL,IAAI,EAAE,OAAO;QACb,IAAI,EAAE;YACJ,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,KAAK,CAAC,IAAI;SAClB;QACD,SAAS,EAAE,IAAI;KAChB,CAAC;AACJ,CAAC;AAED,SAAS,cAAc,CACrB,KAAyB,EACzB,MAIC;IAJD,uBAAA,EAAA;QAGE,KAAK,EAAE,CAAC;KACT;IAED,IAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAErC,IAAI,sBAAY,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,KAAK,CAAC;KACd;IAED,IAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAApB,CAAoB,CAAC,CAAC,MAAM,CAAC;IAC5D,OAAO,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;AAC7B,CAAC","sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLObjectType,\n  isObjectType,\n  getNamedType,\n  isUnionType,\n  DocumentNode,\n  OperationDefinitionNode,\n  VariableDefinitionNode,\n  isNonNullType,\n  SelectionNode,\n  InlineFragmentNode,\n  GraphQLNamedType,\n  SelectionSetNode,\n  isScalarType,\n  TypeNode,\n  isListType,\n  ArgumentNode,\n  GraphQLField,\n  GraphQLArgument,\n  GraphQLInputType,\n  GraphQLList,\n  ListTypeNode,\n  GraphQLNonNull,\n  NonNullTypeNode,\n  OperationTypeNode,\n} from 'graphql';\nimport * as changeCase from 'change-case';\n\nimport { Ignore } from './types';\nimport { logger } from './logger';\n\nlet operationVariables: VariableDefinitionNode[] = [];\n\nfunction addOperationVariable(variable: VariableDefinitionNode) {\n  operationVariables.push(variable);\n}\n\nfunction resetOperationVariables() {\n  operationVariables = [];\n}\n\nfunction buildOperationName(name: string) {\n  return changeCase.camel(name);\n}\n\nexport type Skip = string[];\nexport type Force = string[];\n\nexport function buildOperation({\n  schema,\n  kind,\n  field,\n  models,\n  ignore,\n  depthLimit,\n}: {\n  schema: GraphQLSchema;\n  kind: OperationTypeNode;\n  field: string;\n  models: string[];\n  ignore: Ignore;\n  depthLimit?: number;\n}) {\n  resetOperationVariables();\n\n  logger.debug(`[Sofa] Building ${field} ${kind}`);\n\n  const document = buildDocumentNode({\n    schema,\n    fieldName: field,\n    kind,\n    models,\n    ignore,\n    depthLimit: depthLimit || 1,\n  });\n\n  // attach variables\n  (document.definitions[0] as any).variableDefinitions = [\n    ...operationVariables,\n  ];\n\n  resetOperationVariables();\n\n  return document;\n}\n\nfunction buildDocumentNode({\n  schema,\n  fieldName,\n  kind,\n  models,\n  ignore,\n  depthLimit,\n}: {\n  schema: GraphQLSchema;\n  fieldName: string;\n  kind: OperationTypeNode;\n  models: string[];\n  ignore: Ignore;\n  depthLimit: number;\n}) {\n  const typeMap: Record<OperationTypeNode, GraphQLObjectType> = {\n    query: schema.getQueryType()!,\n    mutation: schema.getMutationType()!,\n    subscription: schema.getSubscriptionType()!,\n  };\n  const type = typeMap[kind];\n  const field = type.getFields()[fieldName];\n  const operationName = buildOperationName(`${fieldName}_${kind}`);\n\n  if (field.args) {\n    field.args.forEach(arg => {\n      addOperationVariable(resolveVariable(arg));\n    });\n  }\n\n  const operationNode: OperationDefinitionNode = {\n    kind: 'OperationDefinition',\n    operation: kind,\n    name: {\n      kind: 'Name',\n      value: operationName,\n    },\n    variableDefinitions: [],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [\n        resolveField({\n          type,\n          field,\n          models,\n          firstCall: true,\n          path: [],\n          ancestors: [],\n          ignore,\n          depthLimit,\n        }),\n      ],\n    },\n  };\n  const document: DocumentNode = {\n    kind: 'Document',\n    definitions: [operationNode],\n  };\n\n  return document;\n}\n\nfunction resolveSelectionSet({\n  parent,\n  type,\n  models,\n  firstCall,\n  path,\n  ancestors,\n  ignore,\n  depthLimit,\n}: {\n  parent: GraphQLNamedType;\n  type: GraphQLNamedType;\n  models: string[];\n  path: string[];\n  ancestors: GraphQLNamedType[];\n  firstCall?: boolean;\n  ignore: Ignore;\n  depthLimit: number;\n}): SelectionSetNode | undefined {\n  if (isUnionType(type)) {\n    const types = type.getTypes();\n\n    return {\n      kind: 'SelectionSet',\n      selections: types\n        .filter(\n          t =>\n            !hasCircularRef([...ancestors, t], {\n              depth: depthLimit,\n            })\n        )\n        .map<InlineFragmentNode>(t => {\n          const fields = t.getFields();\n\n          return {\n            kind: 'InlineFragment',\n            typeCondition: {\n              kind: 'NamedType',\n              name: {\n                kind: 'Name',\n                value: t.name,\n              },\n            },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: Object.keys(fields).map(fieldName => {\n                return resolveField({\n                  type: t,\n                  field: fields[fieldName],\n                  models,\n                  path: [...path, fieldName],\n                  ancestors,\n                  ignore,\n                  depthLimit,\n                });\n              }),\n            },\n          };\n        }),\n    };\n  }\n\n  if (isObjectType(type)) {\n    const isIgnored =\n      ignore.includes(type.name) ||\n      ignore.includes(`${parent.name}.${path[path.length - 1]}`);\n    const isModel = models.includes(type.name);\n\n    if (!firstCall && isModel && !isIgnored) {\n      return {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: 'id',\n            },\n          },\n        ],\n      };\n    }\n\n    const fields = type.getFields();\n\n    return {\n      kind: 'SelectionSet',\n      selections: Object.keys(fields)\n        .filter(fieldName => {\n          return !hasCircularRef(\n            [...ancestors, getNamedType(fields[fieldName].type)],\n            {\n              depth: depthLimit,\n            }\n          );\n        })\n        .map(fieldName => {\n          return resolveField({\n            type: type,\n            field: fields[fieldName],\n            models,\n            path: [...path, fieldName],\n            ancestors,\n            ignore,\n            depthLimit,\n          });\n        }),\n    };\n  }\n}\n\nfunction resolveVariable(\n  arg: GraphQLArgument,\n  name?: string\n): VariableDefinitionNode {\n  function resolveVariableType(type: GraphQLList<any>): ListTypeNode;\n  function resolveVariableType(type: GraphQLNonNull<any>): NonNullTypeNode;\n  function resolveVariableType(type: GraphQLInputType): TypeNode;\n  function resolveVariableType(type: GraphQLInputType): TypeNode {\n    if (isListType(type)) {\n      return {\n        kind: 'ListType',\n        type: resolveVariableType(type.ofType),\n      };\n    }\n\n    if (isNonNullType(type)) {\n      return {\n        kind: 'NonNullType',\n        type: resolveVariableType(type.ofType),\n      };\n    }\n\n    return {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: type.name,\n      },\n    };\n  }\n\n  return {\n    kind: 'VariableDefinition',\n    variable: {\n      kind: 'Variable',\n      name: {\n        kind: 'Name',\n        value: name || arg.name,\n      },\n    },\n    type: resolveVariableType(arg.type),\n  };\n}\n\nfunction getArgumentName(name: string, path: string[]): string {\n  return changeCase.camel([...path, name].join('_'));\n}\n\nfunction resolveField({\n  type,\n  field,\n  models,\n  firstCall,\n  path,\n  ancestors,\n  ignore,\n  depthLimit,\n}: {\n  type: GraphQLObjectType;\n  field: GraphQLField<any, any>;\n  models: string[];\n  path: string[];\n  ancestors: GraphQLNamedType[];\n  firstCall?: boolean;\n  ignore: Ignore;\n  depthLimit: number;\n}): SelectionNode {\n  const namedType = getNamedType(field.type);\n  let args: ArgumentNode[] = [];\n\n  if (field.args && field.args.length) {\n    args = field.args.map<ArgumentNode>(arg => {\n      if (!firstCall) {\n        addOperationVariable(\n          resolveVariable(arg, getArgumentName(arg.name, path))\n        );\n      }\n\n      return {\n        kind: 'Argument',\n        name: {\n          kind: 'Name',\n          value: arg.name,\n        },\n        value: {\n          kind: 'Variable',\n          name: {\n            kind: 'Name',\n            value: getArgumentName(arg.name, path),\n          },\n        },\n      };\n    });\n  }\n\n  if (!isScalarType(namedType)) {\n    return {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: field.name,\n      },\n      selectionSet: resolveSelectionSet({\n        parent: type,\n        type: namedType,\n        models,\n        firstCall,\n        path: [...path, field.name],\n        ancestors: [...ancestors, type],\n        ignore,\n        depthLimit,\n      }),\n      arguments: args,\n    };\n  }\n\n  return {\n    kind: 'Field',\n    name: {\n      kind: 'Name',\n      value: field.name,\n    },\n    arguments: args,\n  };\n}\n\nfunction hasCircularRef(\n  types: GraphQLNamedType[],\n  config: {\n    depth: number;\n  } = {\n    depth: 1,\n  }\n): boolean {\n  const type = types[types.length - 1];\n\n  if (isScalarType(type)) {\n    return false;\n  }\n\n  const size = types.filter(t => t.name === type.name).length;\n  return size > config.depth;\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"operation.js","sourceRoot":"","sources":["../src/operation.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLObjectType,\n  isObjectType,\n  getNamedType,\n  isUnionType,\n  DocumentNode,\n  OperationDefinitionNode,\n  VariableDefinitionNode,\n  isNonNullType,\n  SelectionNode,\n  InlineFragmentNode,\n  GraphQLNamedType,\n  SelectionSetNode,\n  isScalarType,\n  TypeNode,\n  isListType,\n  ArgumentNode,\n  GraphQLField,\n  GraphQLArgument,\n  GraphQLInputType,\n  GraphQLList,\n  ListTypeNode,\n  GraphQLNonNull,\n  NonNullTypeNode,\n  OperationTypeNode,\n} from 'graphql';\nimport * as changeCase from 'change-case';\n\nimport { Ignore } from './types';\nimport { logger } from './logger';\n\nlet operationVariables: VariableDefinitionNode[] = [];\n\nfunction addOperationVariable(variable: VariableDefinitionNode) {\n  operationVariables.push(variable);\n}\n\nfunction resetOperationVariables() {\n  operationVariables = [];\n}\n\nfunction buildOperationName(name: string) {\n  return changeCase.camel(name);\n}\n\nexport type Skip = string[];\nexport type Force = string[];\n\nexport function buildOperation({\n  schema,\n  kind,\n  field,\n  models,\n  ignore,\n  depthLimit,\n}: {\n  schema: GraphQLSchema;\n  kind: OperationTypeNode;\n  field: string;\n  models: string[];\n  ignore: Ignore;\n  depthLimit?: number;\n}) {\n  resetOperationVariables();\n\n  logger.debug(`[Sofa] Building ${field} ${kind}`);\n\n  const document = buildDocumentNode({\n    schema,\n    fieldName: field,\n    kind,\n    models,\n    ignore,\n    depthLimit: depthLimit || 1,\n  });\n\n  // attach variables\n  (document.definitions[0] as any).variableDefinitions = [\n    ...operationVariables,\n  ];\n\n  resetOperationVariables();\n\n  return document;\n}\n\nfunction buildDocumentNode({\n  schema,\n  fieldName,\n  kind,\n  models,\n  ignore,\n  depthLimit,\n}: {\n  schema: GraphQLSchema;\n  fieldName: string;\n  kind: OperationTypeNode;\n  models: string[];\n  ignore: Ignore;\n  depthLimit: number;\n}) {\n  const typeMap: Record<OperationTypeNode, GraphQLObjectType> = {\n    query: schema.getQueryType()!,\n    mutation: schema.getMutationType()!,\n    subscription: schema.getSubscriptionType()!,\n  };\n  const type = typeMap[kind];\n  const field = type.getFields()[fieldName];\n  const operationName = buildOperationName(`${fieldName}_${kind}`);\n\n  if (field.args) {\n    field.args.forEach(arg => {\n      addOperationVariable(resolveVariable(arg));\n    });\n  }\n\n  const operationNode: OperationDefinitionNode = {\n    kind: 'OperationDefinition',\n    operation: kind,\n    name: {\n      kind: 'Name',\n      value: operationName,\n    },\n    variableDefinitions: [],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [\n        resolveField({\n          type,\n          field,\n          models,\n          firstCall: true,\n          path: [],\n          ancestors: [],\n          ignore,\n          depthLimit,\n        }),\n      ],\n    },\n  };\n  const document: DocumentNode = {\n    kind: 'Document',\n    definitions: [operationNode],\n  };\n\n  return document;\n}\n\nfunction resolveSelectionSet({\n  parent,\n  type,\n  models,\n  firstCall,\n  path,\n  ancestors,\n  ignore,\n  depthLimit,\n}: {\n  parent: GraphQLNamedType;\n  type: GraphQLNamedType;\n  models: string[];\n  path: string[];\n  ancestors: GraphQLNamedType[];\n  firstCall?: boolean;\n  ignore: Ignore;\n  depthLimit: number;\n}): SelectionSetNode | undefined {\n  if (isUnionType(type)) {\n    const types = type.getTypes();\n\n    return {\n      kind: 'SelectionSet',\n      selections: types\n        .filter(\n          t =>\n            !hasCircularRef([...ancestors, t], {\n              depth: depthLimit,\n            })\n        )\n        .map<InlineFragmentNode>(t => {\n          const fields = t.getFields();\n\n          return {\n            kind: 'InlineFragment',\n            typeCondition: {\n              kind: 'NamedType',\n              name: {\n                kind: 'Name',\n                value: t.name,\n              },\n            },\n            selectionSet: {\n              kind: 'SelectionSet',\n              selections: Object.keys(fields).map(fieldName => {\n                return resolveField({\n                  type: t,\n                  field: fields[fieldName],\n                  models,\n                  path: [...path, fieldName],\n                  ancestors,\n                  ignore,\n                  depthLimit,\n                });\n              }),\n            },\n          };\n        }),\n    };\n  }\n\n  if (isObjectType(type)) {\n    const isIgnored =\n      ignore.includes(type.name) ||\n      ignore.includes(`${parent.name}.${path[path.length - 1]}`);\n    const isModel = models.includes(type.name);\n\n    if (!firstCall && isModel && !isIgnored) {\n      return {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            name: {\n              kind: 'Name',\n              value: 'id',\n            },\n          },\n        ],\n      };\n    }\n\n    const fields = type.getFields();\n\n    return {\n      kind: 'SelectionSet',\n      selections: Object.keys(fields)\n        .filter(fieldName => {\n          return !hasCircularRef(\n            [...ancestors, getNamedType(fields[fieldName].type)],\n            {\n              depth: depthLimit,\n            }\n          );\n        })\n        .map(fieldName => {\n          return resolveField({\n            type: type,\n            field: fields[fieldName],\n            models,\n            path: [...path, fieldName],\n            ancestors,\n            ignore,\n            depthLimit,\n          });\n        }),\n    };\n  }\n}\n\nfunction resolveVariable(\n  arg: GraphQLArgument,\n  name?: string\n): VariableDefinitionNode {\n  function resolveVariableType(type: GraphQLList<any>): ListTypeNode;\n  function resolveVariableType(type: GraphQLNonNull<any>): NonNullTypeNode;\n  function resolveVariableType(type: GraphQLInputType): TypeNode;\n  function resolveVariableType(type: GraphQLInputType): TypeNode {\n    if (isListType(type)) {\n      return {\n        kind: 'ListType',\n        type: resolveVariableType(type.ofType),\n      };\n    }\n\n    if (isNonNullType(type)) {\n      return {\n        kind: 'NonNullType',\n        type: resolveVariableType(type.ofType),\n      };\n    }\n\n    return {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: type.name,\n      },\n    };\n  }\n\n  return {\n    kind: 'VariableDefinition',\n    variable: {\n      kind: 'Variable',\n      name: {\n        kind: 'Name',\n        value: name || arg.name,\n      },\n    },\n    type: resolveVariableType(arg.type),\n  };\n}\n\nfunction getArgumentName(name: string, path: string[]): string {\n  return changeCase.camel([...path, name].join('_'));\n}\n\nfunction resolveField({\n  type,\n  field,\n  models,\n  firstCall,\n  path,\n  ancestors,\n  ignore,\n  depthLimit,\n}: {\n  type: GraphQLObjectType;\n  field: GraphQLField<any, any>;\n  models: string[];\n  path: string[];\n  ancestors: GraphQLNamedType[];\n  firstCall?: boolean;\n  ignore: Ignore;\n  depthLimit: number;\n}): SelectionNode {\n  const namedType = getNamedType(field.type);\n  let args: ArgumentNode[] = [];\n\n  if (field.args && field.args.length) {\n    args = field.args.map<ArgumentNode>(arg => {\n      if (!firstCall) {\n        addOperationVariable(\n          resolveVariable(arg, getArgumentName(arg.name, path))\n        );\n      }\n\n      return {\n        kind: 'Argument',\n        name: {\n          kind: 'Name',\n          value: arg.name,\n        },\n        value: {\n          kind: 'Variable',\n          name: {\n            kind: 'Name',\n            value: getArgumentName(arg.name, path),\n          },\n        },\n      };\n    });\n  }\n\n  if (!isScalarType(namedType)) {\n    return {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: field.name,\n      },\n      selectionSet: resolveSelectionSet({\n        parent: type,\n        type: namedType,\n        models,\n        firstCall,\n        path: [...path, field.name],\n        ancestors: [...ancestors, type],\n        ignore,\n        depthLimit,\n      }),\n      arguments: args,\n    };\n  }\n\n  return {\n    kind: 'Field',\n    name: {\n      kind: 'Name',\n      value: field.name,\n    },\n    arguments: args,\n  };\n}\n\nfunction hasCircularRef(\n  types: GraphQLNamedType[],\n  config: {\n    depth: number;\n  } = {\n    depth: 1,\n  }\n): boolean {\n  const type = types[types.length - 1];\n\n  if (isScalarType(type)) {\n    return false;\n  }\n\n  const size = types.filter(t => t.name === type.name).length;\n  return size > config.depth;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/parse.js b/node_modules/sofa-api/dist/parse.js
index c99bdb3..30e537e 100644
--- a/node_modules/sofa-api/dist/parse.js
+++ b/node_modules/sofa-api/dist/parse.js
@@ -1,46 +1,45 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-var graphql_1 = require("graphql");
-function parseVariable(_a) {
-    var value = _a.value, variable = _a.variable, schema = _a.schema;
+const graphql_1 = require("graphql");
+function parseVariable({ value, variable, schema, }) {
     if (!value) {
         return;
     }
     return resolveVariable({
-        value: value,
+        value,
         type: variable.type,
-        schema: schema,
+        schema,
     });
 }
 exports.parseVariable = parseVariable;
-function resolveVariable(_a) {
-    var value = _a.value, type = _a.type, schema = _a.schema;
+function resolveVariable({ value, type, schema, }) {
     if (type.kind === 'NamedType') {
-        var scalar = schema.getType(type.name.value);
-        if (graphql_1.isScalarType(scalar)) {
+        const namedType = schema.getType(type.name.value);
+        if (graphql_1.isScalarType(namedType)) {
             // GraphQLBoolean.serialize expects a boolean or a number only
-            if (graphql_1.isEqualType(graphql_1.GraphQLBoolean, scalar)) {
+            if (graphql_1.isEqualType(graphql_1.GraphQLBoolean, namedType)) {
                 // we don't support TRUE
                 value = value === 'true';
             }
-            return scalar.serialize(value);
+            return namedType.serialize(value);
+        }
+        if (graphql_1.isInputObjectType(namedType)) {
+            return value && typeof value === 'object' ? value : JSON.parse(value);
         }
         return value;
     }
     if (type.kind === 'ListType') {
-        return value.map(function (val) {
-            return resolveVariable({
-                value: val,
-                type: type.type,
-                schema: schema,
-            });
-        });
+        return value.map(val => resolveVariable({
+            value: val,
+            type: type.type,
+            schema,
+        }));
     }
     if (type.kind === 'NonNullType') {
         return resolveVariable({
             value: value,
             type: type.type,
-            schema: schema,
+            schema,
         });
     }
 }
diff --git a/node_modules/sofa-api/dist/parse.js.map b/node_modules/sofa-api/dist/parse.js.map
index 032da0e..a893a59 100644
--- a/node_modules/sofa-api/dist/parse.js.map
+++ b/node_modules/sofa-api/dist/parse.js.map
@@ -1 +1 @@
-{"version":3,"file":"parse.js","sourceRoot":"","sources":["../src/parse.ts"],"names":[],"mappings":";;AAAA,mCAOiB;AAEjB,SAAgB,aAAa,CAAC,EAQ7B;QAPC,gBAAK,EACL,sBAAQ,EACR,kBAAM;IAMN,IAAI,CAAC,KAAK,EAAE;QACV,OAAO;KACR;IAED,OAAO,eAAe,CAAC;QACrB,KAAK,OAAA;QACL,IAAI,EAAE,QAAQ,CAAC,IAAI;QACnB,MAAM,QAAA;KACP,CAAC,CAAC;AACL,CAAC;AAlBD,sCAkBC;AAED,SAAS,eAAe,CAAC,EAQxB;QAPC,gBAAK,EACL,cAAI,EACJ,kBAAM;IAMN,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;QAC7B,IAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE/C,IAAI,sBAAY,CAAC,MAAM,CAAC,EAAE;YACxB,8DAA8D;YAC9D,IAAI,qBAAW,CAAC,wBAAc,EAAE,MAAM,CAAC,EAAE;gBACvC,wBAAwB;gBACxB,KAAK,GAAG,KAAK,KAAK,MAAM,CAAC;aAC1B;YAED,OAAO,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAChC;QAED,OAAO,KAAK,CAAC;KACd;IAED,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;QAC5B,OAAQ,KAAe,CAAC,GAAG,CAAC,UAAA,GAAG;YAC7B,OAAA,eAAe,CAAC;gBACd,KAAK,EAAE,GAAG;gBACV,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,QAAA;aACP,CAAC;QAJF,CAIE,CACH,CAAC;KACH;IAED,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE;QAC/B,OAAO,eAAe,CAAC;YACrB,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,QAAA;SACP,CAAC,CAAC;KACJ;AACH,CAAC","sourcesContent":["import {\n  VariableDefinitionNode,\n  GraphQLSchema,\n  TypeNode,\n  isScalarType,\n  isEqualType,\n  GraphQLBoolean,\n} from 'graphql';\n\nexport function parseVariable({\n  value,\n  variable,\n  schema,\n}: {\n  value: any;\n  variable: VariableDefinitionNode;\n  schema: GraphQLSchema;\n}) {\n  if (!value) {\n    return;\n  }\n\n  return resolveVariable({\n    value,\n    type: variable.type,\n    schema,\n  });\n}\n\nfunction resolveVariable({\n  value,\n  type,\n  schema,\n}: {\n  value: any;\n  type: TypeNode;\n  schema: GraphQLSchema;\n}): any | any[] {\n  if (type.kind === 'NamedType') {\n    const scalar = schema.getType(type.name.value);\n\n    if (isScalarType(scalar)) {\n      // GraphQLBoolean.serialize expects a boolean or a number only\n      if (isEqualType(GraphQLBoolean, scalar)) {\n        // we don't support TRUE\n        value = value === 'true';\n      }\n\n      return scalar.serialize(value);\n    }\n\n    return value;\n  }\n\n  if (type.kind === 'ListType') {\n    return (value as any[]).map(val =>\n      resolveVariable({\n        value: val,\n        type: type.type,\n        schema,\n      })\n    );\n  }\n\n  if (type.kind === 'NonNullType') {\n    return resolveVariable({\n      value: value,\n      type: type.type,\n      schema,\n    });\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"parse.js","sourceRoot":"","sources":["../src/parse.ts"],"names":[],"mappings":";;AAAA,qCAQiB;AAEjB,SAAgB,aAAa,CAAC,EAC5B,KAAK,EACL,QAAQ,EACR,MAAM,GAKP;IACC,IAAI,CAAC,KAAK,EAAE;QACV,OAAO;KACR;IAED,OAAO,eAAe,CAAC;QACrB,KAAK;QACL,IAAI,EAAE,QAAQ,CAAC,IAAI;QACnB,MAAM;KACP,CAAC,CAAC;AACL,CAAC;AAlBD,sCAkBC;AAED,SAAS,eAAe,CAAC,EACvB,KAAK,EACL,IAAI,EACJ,MAAM,GAKP;IACC,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;QAC7B,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAElD,IAAI,sBAAY,CAAC,SAAS,CAAC,EAAE;YAC3B,8DAA8D;YAC9D,IAAI,qBAAW,CAAC,wBAAc,EAAE,SAAS,CAAC,EAAE;gBAC1C,wBAAwB;gBACxB,KAAK,GAAG,KAAK,KAAK,MAAM,CAAC;aAC1B;YAED,OAAO,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACnC;QAED,IAAI,2BAAiB,CAAC,SAAS,CAAC,EAAE;YAChC,OAAO,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACvE;QAED,OAAO,KAAK,CAAC;KACd;IAED,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;QAC5B,OAAQ,KAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAChC,eAAe,CAAC;YACd,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM;SACP,CAAC,CACH,CAAC;KACH;IAED,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE;QAC/B,OAAO,eAAe,CAAC;YACrB,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM;SACP,CAAC,CAAC;KACJ;AACH,CAAC","sourcesContent":["import {\n  VariableDefinitionNode,\n  GraphQLSchema,\n  TypeNode,\n  isScalarType,\n  isEqualType,\n  GraphQLBoolean,\n  isInputObjectType,\n} from 'graphql';\n\nexport function parseVariable({\n  value,\n  variable,\n  schema,\n}: {\n  value: any;\n  variable: VariableDefinitionNode;\n  schema: GraphQLSchema;\n}) {\n  if (!value) {\n    return;\n  }\n\n  return resolveVariable({\n    value,\n    type: variable.type,\n    schema,\n  });\n}\n\nfunction resolveVariable({\n  value,\n  type,\n  schema,\n}: {\n  value: any;\n  type: TypeNode;\n  schema: GraphQLSchema;\n}): any | any[] {\n  if (type.kind === 'NamedType') {\n    const namedType = schema.getType(type.name.value);\n\n    if (isScalarType(namedType)) {\n      // GraphQLBoolean.serialize expects a boolean or a number only\n      if (isEqualType(GraphQLBoolean, namedType)) {\n        // we don't support TRUE\n        value = value === 'true';\n      }\n\n      return namedType.serialize(value);\n    }\n\n    if (isInputObjectType(namedType)) {\n      return value && typeof value === 'object' ? value : JSON.parse(value);\n    }\n\n    return value;\n  }\n\n  if (type.kind === 'ListType') {\n    return (value as any[]).map(val =>\n      resolveVariable({\n        value: val,\n        type: type.type,\n        schema,\n      })\n    );\n  }\n\n  if (type.kind === 'NonNullType') {\n    return resolveVariable({\n      value: value,\n      type: type.type,\n      schema,\n    });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/sofa.js b/node_modules/sofa-api/dist/sofa.js
index 98ec78f..39fb75f 100644
--- a/node_modules/sofa-api/dist/sofa.js
+++ b/node_modules/sofa-api/dist/sofa.js
@@ -1,30 +1,18 @@
 "use strict";
-var __assign = (this && this.__assign) || function () {
-    __assign = Object.assign || function(t) {
-        for (var s, i = 1, n = arguments.length; i < n; i++) {
-            s = arguments[i];
-            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
-                t[p] = s[p];
-        }
-        return t;
-    };
-    return __assign.apply(this, arguments);
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-var graphql_1 = require("graphql");
-var common_1 = require("./common");
-var logger_1 = require("./logger");
+const graphql_1 = require("graphql");
+const common_1 = require("./common");
+const logger_1 = require("./logger");
 function createSofa(config) {
     logger_1.logger.debug('[Sofa] Created');
-    var models = extractsModels(config.schema);
-    var ignore = config.ignore || [];
-    logger_1.logger.debug("[Sofa] models: " + models.join(', '));
-    logger_1.logger.debug("[Sofa] ignore: " + ignore.join(', '));
-    return __assign({ context: function (_a) {
-            var req = _a.req;
-            return { req: req };
-        }, execute: graphql_1.graphql, models: models,
-        ignore: ignore }, config);
+    const models = extractsModels(config.schema);
+    const ignore = config.ignore || [];
+    logger_1.logger.debug(`[Sofa] models: ${models.join(', ')}`);
+    logger_1.logger.debug(`[Sofa] ignore: ${ignore.join(', ')}`);
+    return Object.assign({ context({ req }) {
+            return { req };
+        }, execute: graphql_1.graphql, models,
+        ignore }, config);
 }
 exports.createSofa = createSofa;
 // Objects and Unions are the only things that are used to define return types
@@ -33,14 +21,14 @@ exports.createSofa = createSofa;
 // they might represent an Object that is not a model
 // We check it later, when an operation is being built
 function extractsModels(schema) {
-    var modelMap = {};
-    var query = schema.getQueryType();
-    var fields = query.getFields();
+    const modelMap = {};
+    const query = schema.getQueryType();
+    const fields = query.getFields();
     // if Query[type] (no args) and Query[type](just id as an argument)
     // loop through every field
-    for (var fieldName in fields) {
-        var field = fields[fieldName];
-        var namedType = graphql_1.getNamedType(field.type);
+    for (const fieldName in fields) {
+        const field = fields[fieldName];
+        const namedType = graphql_1.getNamedType(field.type);
         if (hasID(namedType)) {
             if (!modelMap[namedType.name]) {
                 modelMap[namedType.name] = {};
@@ -50,10 +38,8 @@ function extractsModels(schema) {
                 // check if name of a field matches a name of a named type (in plural)
                 // check if has no non-optional arguments
                 // add to registry with `list: true`
-                var sameName = isNameEqual(field.name, namedType.name + 's');
-                var allOptionalArguments = !field.args.some(function (arg) {
-                    return graphql_1.isNonNullType(arg.type);
-                });
+                const sameName = isNameEqual(field.name, namedType.name + 's');
+                const allOptionalArguments = !field.args.some(arg => graphql_1.isNonNullType(arg.type));
                 modelMap[namedType.name].list = sameName && allOptionalArguments;
             }
             else if (graphql_1.isObjectType(field.type) ||
@@ -62,13 +48,13 @@ function extractsModels(schema) {
                 // check if name of a field matches with name of an object type
                 // check if has only one argument named `id`
                 // add to registry with `single: true`
-                var sameName = isNameEqual(field.name, namedType.name);
-                var hasIdArgument = field.args.length === 1 && field.args[0].name === 'id';
+                const sameName = isNameEqual(field.name, namedType.name);
+                const hasIdArgument = field.args.length === 1 && field.args[0].name === 'id';
                 modelMap[namedType.name].single = sameName && hasIdArgument;
             }
         }
     }
-    return Object.keys(modelMap).filter(function (name) { return modelMap[name].list && modelMap[name].single; });
+    return Object.keys(modelMap).filter(name => modelMap[name].list && modelMap[name].single);
 }
 // it's dumb but let's leave it for now
 function isArrayOf(type, expected) {
diff --git a/node_modules/sofa-api/dist/sofa.js.map b/node_modules/sofa-api/dist/sofa.js.map
index 072439e..a3f1f4a 100644
--- a/node_modules/sofa-api/dist/sofa.js.map
+++ b/node_modules/sofa-api/dist/sofa.js.map
@@ -1 +1 @@
-{"version":3,"file":"sofa.js","sourceRoot":"","sources":["../src/sofa.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLSchema,\n  graphql,\n  isObjectType,\n  GraphQLObjectType,\n  getNamedType,\n  GraphQLNamedType,\n  isListType,\n  isNonNullType,\n  GraphQLOutputType,\n} from 'graphql';\n\nimport { Ignore, Context, ContextFn, ExecuteFn, OnRoute } from './types';\nimport { convertName } from './common';\nimport { logger } from './logger';\n\n// user passes:\n// - schema\n// - error handler\n// - execute function\n// - context\n\nexport interface SofaConfig {\n  schema: GraphQLSchema;\n  context?: Context;\n  execute?: ExecuteFn;\n  ignore?: Ignore; // treat an Object with an ID as not a model - accepts ['User', 'Message.author']\n  onRoute?: OnRoute;\n  depthLimit?: number;\n}\n\nexport interface Sofa {\n  schema: GraphQLSchema;\n  context: Context;\n  models: string[];\n  ignore: Ignore;\n  execute: ExecuteFn;\n  onRoute?: OnRoute;\n}\n\nexport function createSofa(config: SofaConfig): Sofa {\n  logger.debug('[Sofa] Created');\n\n  const models = extractsModels(config.schema);\n  const ignore = config.ignore || [];\n\n  logger.debug(`[Sofa] models: ${models.join(', ')}`);\n  logger.debug(`[Sofa] ignore: ${ignore.join(', ')}`);\n\n  return {\n    context({ req }) {\n      return { req };\n    },\n    execute: graphql,\n    models,\n    ignore,\n    ...config,\n  };\n}\n\n// Objects and Unions are the only things that are used to define return types\n// and both might contain an ID\n// We don't treat Unions as models because\n// they might represent an Object that is not a model\n// We check it later, when an operation is being built\nfunction extractsModels(schema: GraphQLSchema): string[] {\n  const modelMap: {\n    [name: string]: {\n      list?: boolean;\n      single?: boolean;\n    };\n  } = {};\n  const query = schema.getQueryType()!;\n  const fields = query.getFields();\n\n  // if Query[type] (no args) and Query[type](just id as an argument)\n\n  // loop through every field\n  for (const fieldName in fields) {\n    const field = fields[fieldName];\n    const namedType = getNamedType(field.type);\n\n    if (hasID(namedType)) {\n      if (!modelMap[namedType.name]) {\n        modelMap[namedType.name] = {};\n      }\n\n      if (isArrayOf(field.type, namedType)) {\n        // check if type is a list\n        // check if name of a field matches a name of a named type (in plural)\n        // check if has no non-optional arguments\n        // add to registry with `list: true`\n        const sameName = isNameEqual(field.name, namedType.name + 's');\n        const allOptionalArguments = !field.args.some(arg =>\n          isNonNullType(arg.type)\n        );\n\n        modelMap[namedType.name].list = sameName && allOptionalArguments;\n      } else if (\n        isObjectType(field.type) ||\n        (isNonNullType(field.type) && isObjectType(field.type.ofType))\n      ) {\n        // check if type is a graphql object type\n        // check if name of a field matches with name of an object type\n        // check if has only one argument named `id`\n        // add to registry with `single: true`\n        const sameName = isNameEqual(field.name, namedType.name);\n        const hasIdArgument =\n          field.args.length === 1 && field.args[0].name === 'id';\n\n        modelMap[namedType.name].single = sameName && hasIdArgument;\n      }\n    }\n  }\n\n  return Object.keys(modelMap).filter(\n    name => modelMap[name].list && modelMap[name].single\n  );\n}\n\n// it's dumb but let's leave it for now\nfunction isArrayOf(\n  type: GraphQLOutputType,\n  expected: GraphQLObjectType\n): boolean {\n  if (isOptionalList(type)) {\n    return true;\n  }\n\n  if (isNonNullType(type) && isOptionalList(type.ofType)) {\n    return true;\n  }\n\n  function isOptionalList(list: GraphQLOutputType) {\n    if (isListType(list)) {\n      if (list.ofType.name === expected.name) {\n        return true;\n      }\n\n      if (\n        isNonNullType(list.ofType) &&\n        list.ofType.ofType.name === expected.name\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction hasID(type: GraphQLNamedType): type is GraphQLObjectType {\n  return isObjectType(type) && !!type.getFields().id;\n}\n\nfunction isNameEqual(a: string, b: string): boolean {\n  return convertName(a) === convertName(b);\n}\n\nexport function isContextFn(context: any): context is ContextFn {\n  return typeof context === 'function';\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"sofa.js","sourceRoot":"","sources":["../src/sofa.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GraphQLSchema,\n  graphql,\n  isObjectType,\n  GraphQLObjectType,\n  getNamedType,\n  GraphQLNamedType,\n  isListType,\n  isNonNullType,\n  GraphQLOutputType,\n} from 'graphql';\n\nimport { Ignore, Context, ContextFn, ExecuteFn, OnRoute } from './types';\nimport { convertName } from './common';\nimport { logger } from './logger';\n\n// user passes:\n// - schema\n// - error handler\n// - execute function\n// - context\n\nexport interface SofaConfig {\n  schema: GraphQLSchema;\n  context?: Context;\n  execute?: ExecuteFn;\n  ignore?: Ignore; // treat an Object with an ID as not a model - accepts ['User', 'Message.author']\n  onRoute?: OnRoute;\n  depthLimit?: number;\n}\n\nexport interface Sofa {\n  schema: GraphQLSchema;\n  context: Context;\n  models: string[];\n  ignore: Ignore;\n  execute: ExecuteFn;\n  onRoute?: OnRoute;\n}\n\nexport function createSofa(config: SofaConfig): Sofa {\n  logger.debug('[Sofa] Created');\n\n  const models = extractsModels(config.schema);\n  const ignore = config.ignore || [];\n\n  logger.debug(`[Sofa] models: ${models.join(', ')}`);\n  logger.debug(`[Sofa] ignore: ${ignore.join(', ')}`);\n\n  return {\n    context({ req }) {\n      return { req };\n    },\n    execute: graphql,\n    models,\n    ignore,\n    ...config,\n  };\n}\n\n// Objects and Unions are the only things that are used to define return types\n// and both might contain an ID\n// We don't treat Unions as models because\n// they might represent an Object that is not a model\n// We check it later, when an operation is being built\nfunction extractsModels(schema: GraphQLSchema): string[] {\n  const modelMap: {\n    [name: string]: {\n      list?: boolean;\n      single?: boolean;\n    };\n  } = {};\n  const query = schema.getQueryType()!;\n  const fields = query.getFields();\n\n  // if Query[type] (no args) and Query[type](just id as an argument)\n\n  // loop through every field\n  for (const fieldName in fields) {\n    const field = fields[fieldName];\n    const namedType = getNamedType(field.type);\n\n    if (hasID(namedType)) {\n      if (!modelMap[namedType.name]) {\n        modelMap[namedType.name] = {};\n      }\n\n      if (isArrayOf(field.type, namedType)) {\n        // check if type is a list\n        // check if name of a field matches a name of a named type (in plural)\n        // check if has no non-optional arguments\n        // add to registry with `list: true`\n        const sameName = isNameEqual(field.name, namedType.name + 's');\n        const allOptionalArguments = !field.args.some(arg =>\n          isNonNullType(arg.type)\n        );\n\n        modelMap[namedType.name].list = sameName && allOptionalArguments;\n      } else if (\n        isObjectType(field.type) ||\n        (isNonNullType(field.type) && isObjectType(field.type.ofType))\n      ) {\n        // check if type is a graphql object type\n        // check if name of a field matches with name of an object type\n        // check if has only one argument named `id`\n        // add to registry with `single: true`\n        const sameName = isNameEqual(field.name, namedType.name);\n        const hasIdArgument =\n          field.args.length === 1 && field.args[0].name === 'id';\n\n        modelMap[namedType.name].single = sameName && hasIdArgument;\n      }\n    }\n  }\n\n  return Object.keys(modelMap).filter(\n    name => modelMap[name].list && modelMap[name].single\n  );\n}\n\n// it's dumb but let's leave it for now\nfunction isArrayOf(\n  type: GraphQLOutputType,\n  expected: GraphQLObjectType\n): boolean {\n  if (isOptionalList(type)) {\n    return true;\n  }\n\n  if (isNonNullType(type) && isOptionalList(type.ofType)) {\n    return true;\n  }\n\n  function isOptionalList(list: GraphQLOutputType) {\n    if (isListType(list)) {\n      if (list.ofType.name === expected.name) {\n        return true;\n      }\n\n      if (\n        isNonNullType(list.ofType) &&\n        list.ofType.ofType.name === expected.name\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction hasID(type: GraphQLNamedType): type is GraphQLObjectType {\n  return isObjectType(type) && !!type.getFields().id;\n}\n\nfunction isNameEqual(a: string, b: string): boolean {\n  return convertName(a) === convertName(b);\n}\n\nexport function isContextFn(context: any): context is ContextFn {\n  return typeof context === 'function';\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/subscriptions.js b/node_modules/sofa-api/dist/subscriptions.js
index f97e404..adbe7dd 100644
--- a/node_modules/sofa-api/dist/subscriptions.js
+++ b/node_modules/sofa-api/dist/subscriptions.js
@@ -1,15 +1,4 @@
 "use strict";
-var __assign = (this && this.__assign) || function () {
-    __assign = Object.assign || function(t) {
-        for (var s, i = 1, n = arguments.length; i < n; i++) {
-            s = arguments[i];
-            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
-                t[p] = s[p];
-        }
-        return t;
-    };
-    return __assign.apply(this, arguments);
-};
 var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
     return new (P || (P = Promise))(function (resolve, reject) {
         function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
@@ -18,247 +7,167 @@ var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, ge
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
-var __generator = (this && this.__generator) || function (thisArg, body) {
-    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
-    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
-    function verb(n) { return function (v) { return step([n, v]); }; }
-    function step(op) {
-        if (f) throw new TypeError("Generator is already executing.");
-        while (_) try {
-            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
-            if (y = 0, t) op = [op[0] & 2, t.value];
-            switch (op[0]) {
-                case 0: case 1: t = op; break;
-                case 4: _.label++; return { value: op[1], done: false };
-                case 5: _.label++; y = op[1]; op = [0]; continue;
-                case 7: op = _.ops.pop(); _.trys.pop(); continue;
-                default:
-                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
-                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
-                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
-                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
-                    if (t[2]) _.ops.pop();
-                    _.trys.pop(); continue;
-            }
-            op = body.call(thisArg, _);
-        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
-        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
-    }
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-var graphql_1 = require("graphql");
-var uuid = require("uuid/v4");
-var request = require("request-promise-native");
-var iterall_1 = require("iterall");
-var operation_1 = require("./operation");
-var sofa_1 = require("./sofa");
-var ast_1 = require("./ast");
-var parse_1 = require("./parse");
-var logger_1 = require("./logger");
-var SubscriptionManager = /** @class */ (function () {
-    function SubscriptionManager(sofa) {
+const graphql_1 = require("graphql");
+const uuid = require("uuid/v4");
+const request = require("request-promise-native");
+const iterall_1 = require("iterall");
+const operation_1 = require("./operation");
+const sofa_1 = require("./sofa");
+const ast_1 = require("./ast");
+const parse_1 = require("./parse");
+const logger_1 = require("./logger");
+class SubscriptionManager {
+    constructor(sofa) {
         this.sofa = sofa;
         this.operations = new Map();
         this.clients = new Map();
         this.buildOperations();
     }
-    SubscriptionManager.prototype.start = function (event, _a) {
-        var req = _a.req, res = _a.res;
-        return __awaiter(this, void 0, void 0, function () {
-            var id, name, _b, document, operationName, variables, result;
-            return __generator(this, function (_c) {
-                switch (_c.label) {
-                    case 0:
-                        id = uuid();
-                        name = event.subscription;
-                        if (!this.operations.has(name)) {
-                            throw new Error("Subscription '" + name + "' is not available");
-                        }
-                        _b = this.operations.get(name), document = _b.document, operationName = _b.operationName, variables = _b.variables;
-                        logger_1.logger.info("[Subscription] Start " + id, event);
-                        return [4 /*yield*/, this.execute({
-                                id: id,
-                                name: name,
-                                url: event.url,
-                                document: document,
-                                operationName: operationName,
-                                variables: variables,
-                                req: req,
-                                res: res,
-                            })];
-                    case 1:
-                        result = _c.sent();
-                        if (typeof result !== 'undefined') {
-                            return [2 /*return*/, result];
-                        }
-                        return [2 /*return*/, { id: id }];
-                }
+    start(event, { req, res, }) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const id = uuid();
+            const name = event.subscription;
+            if (!this.operations.has(name)) {
+                throw new Error(`Subscription '${name}' is not available`);
+            }
+            const { document, operationName, variables } = this.operations.get(name);
+            logger_1.logger.info(`[Subscription] Start ${id}`, event);
+            const result = yield this.execute({
+                id,
+                name,
+                url: event.url,
+                document,
+                operationName,
+                variables,
+                req,
+                res,
             });
+            if (typeof result !== 'undefined') {
+                return result;
+            }
+            return { id };
         });
-    };
-    SubscriptionManager.prototype.stop = function (id) {
-        return __awaiter(this, void 0, void 0, function () {
-            var execution;
-            return __generator(this, function (_a) {
-                logger_1.logger.info("[Subscription] Stop " + id);
-                if (!this.clients.has(id)) {
-                    throw new Error("Subscription with ID '" + id + "' does not exist");
-                }
-                execution = this.clients.get(id);
-                if (execution.iterator.return) {
-                    execution.iterator.return();
-                }
-                this.clients.delete(id);
-                return [2 /*return*/, { id: id }];
-            });
+    }
+    stop(id) {
+        return __awaiter(this, void 0, void 0, function* () {
+            logger_1.logger.info(`[Subscription] Stop ${id}`);
+            if (!this.clients.has(id)) {
+                throw new Error(`Subscription with ID '${id}' does not exist`);
+            }
+            const execution = this.clients.get(id);
+            if (execution.iterator.return) {
+                execution.iterator.return();
+            }
+            this.clients.delete(id);
+            return { id };
         });
-    };
-    SubscriptionManager.prototype.update = function (event, _a) {
-        var req = _a.req, res = _a.res;
-        return __awaiter(this, void 0, void 0, function () {
-            var variables, id, _b, subscription, url;
-            return __generator(this, function (_c) {
-                variables = event.variables, id = event.id;
-                logger_1.logger.info("[Subscription] Update " + id, event);
-                if (!this.clients.has(id)) {
-                    throw new Error("Subscription with ID '" + id + "' does not exist");
-                }
-                _b = this.clients.get(id), subscription = _b.name, url = _b.url;
-                this.stop(id);
-                return [2 /*return*/, this.start({
-                        url: url,
-                        subscription: subscription,
-                        variables: variables,
-                    }, {
-                        req: req,
-                        res: res,
-                    })];
+    }
+    update(event, { req, res, }) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { variables, id } = event;
+            logger_1.logger.info(`[Subscription] Update ${id}`, event);
+            if (!this.clients.has(id)) {
+                throw new Error(`Subscription with ID '${id}' does not exist`);
+            }
+            const { name: subscription, url } = this.clients.get(id);
+            this.stop(id);
+            return this.start({
+                url,
+                subscription,
+                variables,
+            }, {
+                req,
+                res,
             });
         });
-    };
-    SubscriptionManager.prototype.execute = function (_a) {
-        var id = _a.id, document = _a.document, name = _a.name, url = _a.url, operationName = _a.operationName, variables = _a.variables, req = _a.req, res = _a.res;
-        return __awaiter(this, void 0, void 0, function () {
-            var variableNodes, variableValues, C, _b, execution;
-            var _this = this;
-            return __generator(this, function (_c) {
-                switch (_c.label) {
-                    case 0:
-                        variableNodes = this.operations.get(name).variables;
-                        variableValues = variableNodes.reduce(function (values, variable) {
-                            var _a;
-                            var value = parse_1.parseVariable({
-                                value: variables[variable.variable.name.value],
-                                variable: variable,
-                                schema: _this.sofa.schema,
-                            });
-                            if (typeof value === 'undefined') {
-                                return values;
-                            }
-                            return __assign({}, values, (_a = {}, _a[name] = value, _a));
-                        }, {});
-                        if (!sofa_1.isContextFn(this.sofa.context)) return [3 /*break*/, 2];
-                        return [4 /*yield*/, this.sofa.context({ req: req, res: res })];
-                    case 1:
-                        _b = _c.sent();
-                        return [3 /*break*/, 3];
-                    case 2:
-                        _b = this.sofa.context;
-                        _c.label = 3;
-                    case 3:
-                        C = _b;
-                        return [4 /*yield*/, graphql_1.subscribe({
-                                schema: this.sofa.schema,
-                                document: document,
-                                operationName: operationName,
-                                variableValues: variableValues,
-                                contextValue: C,
-                            })];
-                    case 4:
-                        execution = _c.sent();
-                        if (iterall_1.isAsyncIterable(execution)) {
-                            // successful
-                            // add execution to clients
-                            this.clients.set(id, {
-                                name: name,
-                                url: url,
-                                iterator: execution,
-                            });
-                            // success
-                            iterall_1.forAwaitEach(execution, function (result) { return __awaiter(_this, void 0, void 0, function () {
-                                return __generator(this, function (_a) {
-                                    switch (_a.label) {
-                                        case 0: return [4 /*yield*/, this.sendData({
-                                                id: id,
-                                                result: result,
-                                            })];
-                                        case 1:
-                                            _a.sent();
-                                            return [2 /*return*/];
-                                    }
-                                });
-                            }); }).then(function () {
-                                // completes
-                                _this.stop(id);
-                            }, function (e) {
-                                logger_1.logger.info("Subscription #" + id + " closed");
-                                console.log(e);
-                                _this.stop(id);
-                            });
-                        }
-                        else {
-                            return [2 /*return*/, execution];
-                        }
-                        return [2 /*return*/];
+    }
+    execute({ id, document, name, url, operationName, variables, req, res, }) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const variableNodes = this.operations.get(name).variables;
+            const variableValues = variableNodes.reduce((values, variable) => {
+                const value = parse_1.parseVariable({
+                    value: variables[variable.variable.name.value],
+                    variable,
+                    schema: this.sofa.schema,
+                });
+                if (typeof value === 'undefined') {
+                    return values;
                 }
+                return Object.assign({}, values, { [name]: value });
+            }, {});
+            const C = sofa_1.isContextFn(this.sofa.context)
+                ? yield this.sofa.context({ req, res })
+                : this.sofa.context;
+            const execution = yield graphql_1.subscribe({
+                schema: this.sofa.schema,
+                document,
+                operationName,
+                variableValues,
+                contextValue: C,
             });
+            if (iterall_1.isAsyncIterable(execution)) {
+                // successful
+                // add execution to clients
+                this.clients.set(id, {
+                    name,
+                    url,
+                    iterator: execution,
+                });
+                // success
+                iterall_1.forAwaitEach(execution, (result) => __awaiter(this, void 0, void 0, function* () {
+                    yield this.sendData({
+                        id,
+                        result,
+                    });
+                })).then(() => {
+                    // completes
+                    this.stop(id);
+                }, e => {
+                    logger_1.logger.info(`Subscription #${id} closed`);
+                    console.log(e);
+                    this.stop(id);
+                });
+            }
+            else {
+                return execution;
+            }
         });
-    };
-    SubscriptionManager.prototype.sendData = function (_a) {
-        var id = _a.id, result = _a.result;
-        return __awaiter(this, void 0, void 0, function () {
-            var url;
-            return __generator(this, function (_b) {
-                switch (_b.label) {
-                    case 0:
-                        if (!this.clients.has(id)) {
-                            throw new Error("Subscription with ID '" + id + "' does not exist");
-                        }
-                        url = this.clients.get(id).url;
-                        logger_1.logger.info("[Subscription] Trigger " + id);
-                        return [4 /*yield*/, request.post(url, {
-                                json: result,
-                            })];
-                    case 1:
-                        _b.sent();
-                        return [2 /*return*/];
-                }
+    }
+    sendData({ id, result }) {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (!this.clients.has(id)) {
+                throw new Error(`Subscription with ID '${id}' does not exist`);
+            }
+            const { url } = this.clients.get(id);
+            logger_1.logger.info(`[Subscription] Trigger ${id}`);
+            yield request.post(url, {
+                json: result,
             });
         });
-    };
-    SubscriptionManager.prototype.buildOperations = function () {
-        var subscription = this.sofa.schema.getSubscriptionType();
+    }
+    buildOperations() {
+        const subscription = this.sofa.schema.getSubscriptionType();
         if (!subscription) {
             return;
         }
-        var fieldMap = subscription.getFields();
-        for (var field in fieldMap) {
-            var document = operation_1.buildOperation({
+        const fieldMap = subscription.getFields();
+        for (const field in fieldMap) {
+            const document = operation_1.buildOperation({
                 kind: 'subscription',
-                field: field,
+                field,
                 schema: this.sofa.schema,
                 models: this.sofa.models,
                 ignore: this.sofa.ignore,
             });
-            var _a = ast_1.getOperationInfo(document), variables = _a.variables, operationName = _a.name;
+            const { variables, name: operationName } = ast_1.getOperationInfo(document);
             this.operations.set(field, {
-                operationName: operationName,
-                document: document,
-                variables: variables,
+                operationName,
+                document,
+                variables,
             });
         }
-    };
-    return SubscriptionManager;
-}());
+    }
+}
 exports.SubscriptionManager = SubscriptionManager;
 //# sourceMappingURL=subscriptions.js.map
\ No newline at end of file
diff --git a/node_modules/sofa-api/dist/subscriptions.js.map b/node_modules/sofa-api/dist/subscriptions.js.map
index 7395df4..f73486f 100644
--- a/node_modules/sofa-api/dist/subscriptions.js.map
+++ b/node_modules/sofa-api/dist/subscriptions.js.map
@@ -1 +1 @@
-{"version":3,"file":"subscriptions.js","sourceRoot":"","sources":["../src/subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  subscribe,\n  DocumentNode,\n  VariableDefinitionNode,\n  ExecutionResult,\n} from 'graphql';\nimport * as uuid from 'uuid/v4';\nimport * as request from 'request-promise-native';\nimport { forAwaitEach, isAsyncIterable } from 'iterall';\nimport { buildOperation } from './operation';\nimport { Sofa, isContextFn } from './sofa';\nimport { getOperationInfo } from './ast';\nimport { parseVariable } from './parse';\nimport { logger } from './logger';\n\n// To start subscription:\n//   - an url that Sofa should trigger\n//   - name of a subscription\n//   - variables if needed\n//   - some sort of an auth token\n//   - Sofa should return a unique id of that subscription\n//   - respond with OK 200\n\n// To stop subscription\n//   - an id is required\n//   - respond with OK 200\n\n// To update subscription\n//   - an id is required\n//   - new set of variables\n\nexport type ID = string;\nexport type SubscriptionFieldName = string;\n\nexport interface StartSubscriptionEvent {\n  subscription: SubscriptionFieldName;\n  variables: any;\n  url: string;\n}\n\nexport interface UpdateSubscriptionEvent {\n  id: ID;\n  variables: any;\n}\n\nexport interface StopSubscriptionResponse {\n  id: ID;\n}\n\ninterface BuiltOperation {\n  operationName: string;\n  document: DocumentNode;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\ninterface StoredClient {\n  name: SubscriptionFieldName;\n  url: string;\n  iterator: AsyncIterator<any>;\n}\n\nexport class SubscriptionManager {\n  private operations = new Map<SubscriptionFieldName, BuiltOperation>();\n  private clients = new Map<ID, StoredClient>();\n\n  constructor(private sofa: Sofa) {\n    this.buildOperations();\n  }\n\n  public async start(\n    event: StartSubscriptionEvent,\n    {\n      req,\n      res,\n    }: {\n      req: any;\n      res: any;\n    }\n  ) {\n    const id = uuid();\n    const name = event.subscription;\n\n    if (!this.operations.has(name)) {\n      throw new Error(`Subscription '${name}' is not available`);\n    }\n\n    const { document, operationName, variables } = this.operations.get(name)!;\n\n    logger.info(`[Subscription] Start ${id}`, event);\n\n    const result = await this.execute({\n      id,\n      name,\n      url: event.url,\n      document,\n      operationName,\n      variables,\n      req,\n      res,\n    });\n\n    if (typeof result !== 'undefined') {\n      return result;\n    }\n\n    return { id };\n  }\n\n  public async stop(id: ID): Promise<StopSubscriptionResponse> {\n    logger.info(`[Subscription] Stop ${id}`);\n\n    if (!this.clients.has(id)) {\n      throw new Error(`Subscription with ID '${id}' does not exist`);\n    }\n\n    const execution = this.clients.get(id)!;\n\n    if (execution.iterator.return) {\n      execution.iterator.return();\n    }\n\n    this.clients.delete(id);\n\n    return { id };\n  }\n\n  public async update(\n    event: UpdateSubscriptionEvent,\n    {\n      req,\n      res,\n    }: {\n      req: any;\n      res: any;\n    }\n  ) {\n    const { variables, id } = event;\n\n    logger.info(`[Subscription] Update ${id}`, event);\n\n    if (!this.clients.has(id)) {\n      throw new Error(`Subscription with ID '${id}' does not exist`);\n    }\n\n    const { name: subscription, url } = this.clients.get(id)!;\n\n    this.stop(id);\n\n    return this.start(\n      {\n        url,\n        subscription,\n        variables,\n      },\n      {\n        req,\n        res,\n      }\n    );\n  }\n\n  private async execute({\n    id,\n    document,\n    name,\n    url,\n    operationName,\n    variables,\n    req,\n    res,\n  }: {\n    id: ID;\n    name: SubscriptionFieldName;\n    url: string;\n    document: DocumentNode;\n    operationName: string;\n    variables: Record<string, any>;\n    req: any;\n    res: any;\n  }) {\n    const variableNodes = this.operations.get(name)!.variables;\n    const variableValues = variableNodes.reduce((values, variable) => {\n      const value = parseVariable({\n        value: variables[variable.variable.name.value],\n        variable,\n        schema: this.sofa.schema,\n      });\n\n      if (typeof value === 'undefined') {\n        return values;\n      }\n\n      return {\n        ...values,\n        [name]: value,\n      };\n    }, {});\n\n    const C = isContextFn(this.sofa.context)\n      ? await this.sofa.context({ req, res })\n      : this.sofa.context;\n    const execution = await subscribe({\n      schema: this.sofa.schema,\n      document,\n      operationName,\n      variableValues,\n      contextValue: C,\n    });\n\n    if (isAsyncIterable(execution)) {\n      // successful\n\n      // add execution to clients\n      this.clients.set(id, {\n        name,\n        url,\n        iterator: execution as any,\n      });\n\n      // success\n      forAwaitEach(execution, async result => {\n        await this.sendData({\n          id,\n          result,\n        });\n      }).then(\n        () => {\n          // completes\n          this.stop(id);\n        },\n        e => {\n          logger.info(`Subscription #${id} closed`);\n          console.log(e);\n          this.stop(id);\n        }\n      );\n    } else {\n      return execution as ExecutionResult<any>;\n    }\n  }\n\n  private async sendData({ id, result }: { id: ID; result: any }) {\n    if (!this.clients.has(id)) {\n      throw new Error(`Subscription with ID '${id}' does not exist`);\n    }\n\n    const { url } = this.clients.get(id)!;\n\n    logger.info(`[Subscription] Trigger ${id}`);\n\n    await request.post(url, {\n      json: result,\n    });\n  }\n\n  private buildOperations() {\n    const subscription = this.sofa.schema.getSubscriptionType();\n\n    if (!subscription) {\n      return;\n    }\n\n    const fieldMap = subscription.getFields();\n\n    for (const field in fieldMap) {\n      const document = buildOperation({\n        kind: 'subscription',\n        field,\n        schema: this.sofa.schema,\n        models: this.sofa.models,\n        ignore: this.sofa.ignore,\n      });\n\n      const { variables, name: operationName } = getOperationInfo(document)!;\n\n      this.operations.set(field, {\n        operationName,\n        document,\n        variables,\n      });\n    }\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"subscriptions.js","sourceRoot":"","sources":["../src/subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  subscribe,\n  DocumentNode,\n  VariableDefinitionNode,\n  ExecutionResult,\n} from 'graphql';\nimport * as uuid from 'uuid/v4';\nimport * as request from 'request-promise-native';\nimport { forAwaitEach, isAsyncIterable } from 'iterall';\nimport { buildOperation } from './operation';\nimport { Sofa, isContextFn } from './sofa';\nimport { getOperationInfo } from './ast';\nimport { parseVariable } from './parse';\nimport { logger } from './logger';\n\n// To start subscription:\n//   - an url that Sofa should trigger\n//   - name of a subscription\n//   - variables if needed\n//   - some sort of an auth token\n//   - Sofa should return a unique id of that subscription\n//   - respond with OK 200\n\n// To stop subscription\n//   - an id is required\n//   - respond with OK 200\n\n// To update subscription\n//   - an id is required\n//   - new set of variables\n\nexport type ID = string;\nexport type SubscriptionFieldName = string;\n\nexport interface StartSubscriptionEvent {\n  subscription: SubscriptionFieldName;\n  variables: any;\n  url: string;\n}\n\nexport interface UpdateSubscriptionEvent {\n  id: ID;\n  variables: any;\n}\n\nexport interface StopSubscriptionResponse {\n  id: ID;\n}\n\ninterface BuiltOperation {\n  operationName: string;\n  document: DocumentNode;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\ninterface StoredClient {\n  name: SubscriptionFieldName;\n  url: string;\n  iterator: AsyncIterator<any>;\n}\n\nexport class SubscriptionManager {\n  private operations = new Map<SubscriptionFieldName, BuiltOperation>();\n  private clients = new Map<ID, StoredClient>();\n\n  constructor(private sofa: Sofa) {\n    this.buildOperations();\n  }\n\n  public async start(\n    event: StartSubscriptionEvent,\n    {\n      req,\n      res,\n    }: {\n      req: any;\n      res: any;\n    }\n  ) {\n    const id = uuid();\n    const name = event.subscription;\n\n    if (!this.operations.has(name)) {\n      throw new Error(`Subscription '${name}' is not available`);\n    }\n\n    const { document, operationName, variables } = this.operations.get(name)!;\n\n    logger.info(`[Subscription] Start ${id}`, event);\n\n    const result = await this.execute({\n      id,\n      name,\n      url: event.url,\n      document,\n      operationName,\n      variables,\n      req,\n      res,\n    });\n\n    if (typeof result !== 'undefined') {\n      return result;\n    }\n\n    return { id };\n  }\n\n  public async stop(id: ID): Promise<StopSubscriptionResponse> {\n    logger.info(`[Subscription] Stop ${id}`);\n\n    if (!this.clients.has(id)) {\n      throw new Error(`Subscription with ID '${id}' does not exist`);\n    }\n\n    const execution = this.clients.get(id)!;\n\n    if (execution.iterator.return) {\n      execution.iterator.return();\n    }\n\n    this.clients.delete(id);\n\n    return { id };\n  }\n\n  public async update(\n    event: UpdateSubscriptionEvent,\n    {\n      req,\n      res,\n    }: {\n      req: any;\n      res: any;\n    }\n  ) {\n    const { variables, id } = event;\n\n    logger.info(`[Subscription] Update ${id}`, event);\n\n    if (!this.clients.has(id)) {\n      throw new Error(`Subscription with ID '${id}' does not exist`);\n    }\n\n    const { name: subscription, url } = this.clients.get(id)!;\n\n    this.stop(id);\n\n    return this.start(\n      {\n        url,\n        subscription,\n        variables,\n      },\n      {\n        req,\n        res,\n      }\n    );\n  }\n\n  private async execute({\n    id,\n    document,\n    name,\n    url,\n    operationName,\n    variables,\n    req,\n    res,\n  }: {\n    id: ID;\n    name: SubscriptionFieldName;\n    url: string;\n    document: DocumentNode;\n    operationName: string;\n    variables: Record<string, any>;\n    req: any;\n    res: any;\n  }) {\n    const variableNodes = this.operations.get(name)!.variables;\n    const variableValues = variableNodes.reduce((values, variable) => {\n      const value = parseVariable({\n        value: variables[variable.variable.name.value],\n        variable,\n        schema: this.sofa.schema,\n      });\n\n      if (typeof value === 'undefined') {\n        return values;\n      }\n\n      return {\n        ...values,\n        [name]: value,\n      };\n    }, {});\n\n    const C = isContextFn(this.sofa.context)\n      ? await this.sofa.context({ req, res })\n      : this.sofa.context;\n    const execution = await subscribe({\n      schema: this.sofa.schema,\n      document,\n      operationName,\n      variableValues,\n      contextValue: C,\n    });\n\n    if (isAsyncIterable(execution)) {\n      // successful\n\n      // add execution to clients\n      this.clients.set(id, {\n        name,\n        url,\n        iterator: execution as any,\n      });\n\n      // success\n      forAwaitEach(execution, async result => {\n        await this.sendData({\n          id,\n          result,\n        });\n      }).then(\n        () => {\n          // completes\n          this.stop(id);\n        },\n        e => {\n          logger.info(`Subscription #${id} closed`);\n          console.log(e);\n          this.stop(id);\n        }\n      );\n    } else {\n      return execution as ExecutionResult<any>;\n    }\n  }\n\n  private async sendData({ id, result }: { id: ID; result: any }) {\n    if (!this.clients.has(id)) {\n      throw new Error(`Subscription with ID '${id}' does not exist`);\n    }\n\n    const { url } = this.clients.get(id)!;\n\n    logger.info(`[Subscription] Trigger ${id}`);\n\n    await request.post(url, {\n      json: result,\n    });\n  }\n\n  private buildOperations() {\n    const subscription = this.sofa.schema.getSubscriptionType();\n\n    if (!subscription) {\n      return;\n    }\n\n    const fieldMap = subscription.getFields();\n\n    for (const field in fieldMap) {\n      const document = buildOperation({\n        kind: 'subscription',\n        field,\n        schema: this.sofa.schema,\n        models: this.sofa.models,\n        ignore: this.sofa.ignore,\n      });\n\n      const { variables, name: operationName } = getOperationInfo(document)!;\n\n      this.operations.set(field, {\n        operationName,\n        document,\n        variables,\n      });\n    }\n  }\n}\n"]}
\ No newline at end of file
